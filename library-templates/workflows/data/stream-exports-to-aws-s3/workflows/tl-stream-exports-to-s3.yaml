resourceType: Flow
resources:
  - description: >-
      A workflow demonstrating how to stream notebook execution outputs and
      device data exports to an AWS S3 bucket.
    flowClass: cloud
    globals:
      - json: '"AWS_ACCESS_KEY_ID"'
        key: awsAccessKeyId
      - json: '"AWS_SECRET_ACCESS_KEY"'
        key: awsSecretAccessKey
      - json: '"AWS_REGION"'
        key: awsRegion
      - json: '"AWS_BUCKET_NAME"'
        key: awsBucketName
    id: ~exportplaceholderid-flow-tlStreamExportsToS3-0~
    name: tl-stream-exports-to-s3
    nodes:
      - config:
          contextTemplate: ''
          contextTemplateType: none
          notebookIdTemplate: ~exportplaceholderid-notebook-basicNotebook-0~
          relativeToSourceType: payloadTime
          resultPath: working.executionResponse
        id: xj_8aninoU
        meta:
          category: output
          description: ''
          label: 'Notebook: Execute'
          name: notebook-execute
          x: 880
          'y': 380
        outputIds:
          - - oISp9782Mm
        type: NotebookExecuteNode
      - config:
          message: ''
          property: ''
        id: oISp9782Mm
        meta:
          category: output
          description: ''
          label: Debug
          name: debug
          x: 1000
          'y': 480
        outputIds: []
        type: DebugNode
      - config:
          currentItemPath: currentOutput
          loopSourcePath: data.execution.outputInfo
          mapResultPath: working.s3PutResults
          parallel: true
        id: i5kmr0VIwY
        meta:
          category: logic
          description: ''
          groupStartX: 260
          groupStartY: 200
          label: For Each Output
          name: loop
          x: 1120
          'y': 380
        outputIds:
          - - oISp9782Mm
            - 8lw2KhE_V9
          - - Fy_S9xT335
        type: LoopNode
      - config:
          loopNodeId: i5kmr0VIwY
          mapValuePath: working.awsResult
          shouldBreak: false
        id: ffLHqjS6XM
        meta:
          category: loop
          description: ''
          groupId: i5kmr0VIwY
          label: Return
          name: loop-return
          x: 260
          'y': 400
        outputIds: []
        type: LoopCapNode
      - config:
          accessKeyIdTemplate: '{{globals.awsAccessKeyId}}'
          bucketNameTemplate: '{{globals.awsBucketName}}'
          contentTypeTemplate: text/plain
          destination: working.awsResult
          encodingTemplate: utf8
          fileNameTemplate: 'notebookResults/{{formatDate time ''x''}}/{{currentOutput.key}}'
          fileUrlTemplate: '{{currentOutput.value.url}}'
          regionTemplate: '{{globals.awsRegion}}'
          secretAccessKeyTemplate: '{{globals.awsSecretAccessKey}}'
        id: Fy_S9xT335
        meta:
          category: data
          description: ''
          groupId: i5kmr0VIwY
          label: 'AWS S3: Put'
          mode: url
          name: aws-s3-put
          x: 260
          'y': 300
        outputIds:
          - - ffLHqjS6XM
        type: AwsS3PutNode
      - config:
          action: get
          params:
            - name: webhookId
              type: string
              value: ~exportplaceholderid-webhook-callbackWebhook-0~
          resource: webhook
          responsePath: working.webhook
        id: xvVMlqLdGB
        meta:
          category: data
          description: ''
          label: Get Callback URL
          name: losantapi
          x: 340
          'y': 380
        outputIds:
          - - i0R1b4iPqq
        type: LosantApiNode
      - config:
          action: export
          params:
            - name: email
              type: string
              value: ''
            - name: callbackUrl
              type: string
              value: >-
                https://~exportplaceholderid-triggers-url~/webhooks/{{working.webhook.result.token}}
            - name: options
              type: json
              value: ''
          resource: devices
          responsePath: working.exportRequest
        id: i0R1b4iPqq
        meta:
          category: data
          description: ''
          label: Losant API
          name: losantapi
          x: 340
          'y': 480
        outputIds:
          - - LBrAusqQG5
        type: LosantApiNode
      - config:
          message: ''
          property: ''
        id: LBrAusqQG5
        meta:
          category: output
          description: ''
          label: Debug
          name: debug
          x: 460
          'y': 580
        outputIds: []
        type: DebugNode
      - config:
          accessKeyIdTemplate: '{{globals.awsAccessKeyId}}'
          bucketNameTemplate: '{{globals.awsBucketName}}'
          contentTypeTemplate: text/plain
          destination: working.s3PutResult
          encodingTemplate: utf8
          fileNameTemplate: >-
            device-exports/{{applicationId}}-deviceExport-{{formatDate time
            'x'}}.csv
          fileUrlTemplate: '{{data.body.downloadUrl}}'
          regionTemplate: '{{globals.awsRegion}}'
          secretAccessKeyTemplate: '{{globals.awsSecretAccessKey}}'
        id: aiHgwJaBSM
        meta:
          category: data
          description: ''
          label: 'AWS S3: Put'
          mode: url
          name: aws-s3-put
          x: 580
          'y': 480
        outputIds:
          - - LBrAusqQG5
            - vc3vw6Zvma
        type: AwsS3PutNode
      - config:
          accessKeyIdTemplate: '{{globals.awsAccessKeyId}}'
          bucketNameTemplate: '{{globals.awsBucketName}}'
          destination: working.s3GetResult
          encodingTemplate: utf8
          fileNameTemplate: 'notebookResults/{{formatDate time ''x''}}/hello-world.txt'
          isDownloadURL: true
          regionTemplate: '{{globals.awsRegion}}'
          secretAccessKeyTemplate: '{{globals.awsSecretAccessKey}}'
        id: 8lw2KhE_V9
        meta:
          category: data
          description: ''
          label: 'AWS S3: Get'
          name: aws-s3-get
          x: 1120
          'y': 800
        outputIds:
          - - JVz8TmRmkI
        type: AwsS3GetNode
      - config:
          message: ''
          property: ''
        id: JVz8TmRmkI
        meta:
          category: output
          description: ''
          label: Debug
          name: debug
          x: 1120
          'y': 900
        outputIds: []
        type: DebugNode
      - config:
          accessKeyIdTemplate: '{{globals.awsAccessKeyId}}'
          bucketNameTemplate: '{{globals.awsBucketName}}'
          destination: working.s3GetResult
          encodingTemplate: utf8
          fileNameTemplate: >-
            device-exports/{{applicationId}}-deviceExport-{{formatDate time
            'x'}}.csv
          isDownloadURL: true
          regionTemplate: '{{globals.awsRegion}}'
          secretAccessKeyTemplate: '{{globals.awsSecretAccessKey}}'
        id: vc3vw6Zvma
        meta:
          category: data
          description: ''
          label: 'AWS S3: Get'
          name: aws-s3-get
          x: 580
          'y': 800
        outputIds:
          - - NYsothu4BG
        type: AwsS3GetNode
      - config:
          message: ''
          property: ''
        id: NYsothu4BG
        meta:
          category: output
          description: ''
          label: Debug
          name: debug
          x: 580
          'y': 900
        outputIds: []
        type: DebugNode
      - config: {}
        id: CPXfyY7KqM
        meta:
          annotationText: >-
            These are simply to test that the files made it to your S3 bucket.
            If successful, these will return signed URLs from which the results
            can be downloaded. These nodes should be removed after your testing
            is complete.
          category: annotation
          height: 200
          label: Note
          name: note
          width: 280
          x: 800
          'y': 780
        outputIds: []
        type: AnnotationNode
      - config: {}
        id: imiBhj8QQs
        meta:
          annotationText: >-
            ### Stream Notebook Outputs to S3

            Press the Virtual Button to kick off your notebook execution. A
            couple minutes later, the Notebook Trigger will fire and put each of
            your outputs to your S3 bucket.
          category: annotation
          height: 180
          label: Note
          name: note
          width: 500
          x: 840
          'y': 60
        outputIds: []
        type: AnnotationNode
      - config: {}
        id: ppqa4J4nyN
        meta:
          annotationText: >-
            ### Stream Device Exports Outputs to S3

            Press the Virtual Button to kick off a device export. A few seconds
            to several minutes later (depending on how many devices you are
            exporting), the Webhook Trigger will fire as its URL is passed as
            the `callbackUrl` to the export request. The result of the export
            will be streamed to your S3 bucket.
          category: annotation
          height: 180
          label: Note
          name: note
          width: 500
          x: 300
          'y': 60
        outputIds: []
        type: AnnotationNode
      - config: {}
        id: ACNXrXBaxb
        meta:
          annotationText: >-
            This fetches the webhook URL, given its ID. Alternatively, you may
            place the URL directly in the `callbackUrl` field of the node that
            follows it and remove this node.
          category: annotation
          height: 140
          label: Note
          name: note
          width: 280
          x: 40
          'y': 340
        outputIds: []
        type: AnnotationNode
      - config: {}
        id: pbX6wPUFQF
        meta:
          annotationText: >-
            This loops over all notebook execution outputs and places each of
            them in your S3 bucket. Alternatively, if you wish to place only a
            specific file in your bucket, you may extract the AWS S3: Put Node
            from the loop, edit it to target the specific file, and replace the
            Loop Node with it.
          category: annotation
          height: 140
          label: Note
          name: note
          width: 440
          x: 1320
          'y': 340
        outputIds: []
        type: AnnotationNode
    triggers:
      - config: {}
        key: ~exportplaceholderid-notebook-basicNotebook-0~
        meta:
          category: trigger
          description: ''
          label: Notebook
          name: notebook
          uiId: pJYNjscIVS
          x: 1120
          'y': 280
        outputIds:
          - - i5kmr0VIwY
        type: notebook
      - config: {}
        key: ~exportplaceholderid-flow-tlStreamExportsToS3-0~-0UuqasLpTTRii1HeP4-_b
        meta:
          category: trigger
          description: ''
          label: Execute Notebook
          name: virtualButton
          payload: ''
          uiId: 77u42fUS8Z
          x: 880
          'y': 280
        outputIds:
          - - xj_8aninoU
        type: virtualButton
      - config: {}
        key: ~exportplaceholderid-flow-tlStreamExportsToS3-0~-MBXE-l16QnCyi6zZm75Wg
        meta:
          category: trigger
          description: ''
          label: Request Export
          name: virtualButton
          payload: ''
          uiId: 09_slqcbCS
          x: 340
          'y': 280
        outputIds:
          - - xvVMlqLdGB
        type: virtualButton
      - config: {}
        key: ~exportplaceholderid-webhook-callbackWebhook-0~
        meta:
          category: trigger
          description: ''
          label: Export Callback
          name: webhook
          uiId: BB35dWVwAm
          x: 580
          'y': 280
        outputIds:
          - - aiHgwJaBSM
        type: webhook
version: 1
