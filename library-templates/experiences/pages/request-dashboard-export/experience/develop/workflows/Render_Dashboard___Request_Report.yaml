resourceType: ExperienceFlowVersion
resources:
  - enabled: true
    exportHash: fd2686c5c7964598427d9c42d5c2ed83ece21662ff665969ac4de73e8ca0bc4e
    flowId: ~exportplaceholderid-flow-renderDashboardRequestReport~
    globals: []
    id: ~exportplaceholderid-flowVersion-renderDashboardRequestReport~
    name: Render Dashboard / Request Report
    nodes:
      - config:
          bodyTemplate: pageData
          bodyTemplateType: path
          cookieInfo: []
          headerInfo: []
          layoutIdTemplate: ''
          mqttTopicsTemplate: []
          pageIdTemplate: ~exportplaceholderid-experienceView-dashboardPage~
          replyIdPath: ''
          replyType: page
          responseCodeTemplate: '200'
          sameSiteTemplate: ''
        id: Ny4Ym0TIE7
        meta:
          category: output
          description: ''
          label: Render Dashboard
          mqttTopicsType: []
          name: endpoint-reply
          x: 640
          'y': 760
        outputIds:
          - - 6iiIBeIBpO
        type: EndpointReplyNode
      - config:
          level: verbose
          message: ''
          property: ''
        id: 6iiIBeIBpO
        meta:
          category: debug
          description: ''
          label: Debug
          name: debug
          x: 540
          'y': 860
        outputIds: []
        type: DebugNode
      - config:
          action: sendReport
          params:
            - name: dashboardId
              type: string
              value: '{{data.params.dashboardId}}'
            - name: reportConfig
              type: json
              value: |-
                {
                    {{#if working.reportCtx}}"ctx": {{jsonEncode working.reportCtx}},{{/if}}
                    "callbackUrl": "{{data.headers.x-forwarded-proto}}://{{data.headers.host}}/tl-dashboard-report-cb?jwt={{working.jwt}}",
                    "branded": false,
                    "theme": "{{#eq data.query.theme 'dark'}}dark{{else}}light{{/eq}}",
                    "time": {{defaultTo data.query.t 0}}
                }
          resource: applicationDashboard
          responsePath: pageData
        id: kxPlccGryD
        meta:
          category: data
          description: ''
          label: Request Export
          name: losantapi
          x: 740
          'y': 660
        outputIds:
          - - Ny4Ym0TIE7
        type: LosantApiNode
      - config:
          credentialNameTemplate: Sign Dashboard Export
          dataTemplate: |-
            {
              "expUserId": "{{experience.user.id}}" 
            }
          dataTemplateType: json
          destinationPath: working.jwt
          expiresIn: 600
          headerTemplate: ''
          headerTemplateType: json
        id: sMe6RVYDZk
        meta:
          category: logic
          description: ''
          isExpRequired: true
          label: 'JWT: Create'
          name: jwt-create
          timeUnit: Minutes
          x: 740
          'y': 560
        outputIds:
          - - kxPlccGryD
        type: JWTCreateNode
      - config:
          level: verbose
          message: ''
          property: ''
        id: EjGed0u5xs
        meta:
          category: debug
          description: ''
          label: Debug
          name: debug
          x: 540
          'y': 1660
        outputIds: []
        type: DebugNode
      - config:
          credentialNameTemplate: Sign Dashboard Export
          errorPath: working.jwtVerifyError
          tokenTemplate: '{{data.query.jwt}}'
        id: Plp_G1XKYq
        meta:
          category: logic
          description: ''
          label: 'JWT: Verify'
          name: jwt-verify
          x: 540
          'y': 1160
        outputIds:
          - - QVhMTMBL6k
          - - PPoknMwYYQ
        type: JWTVerifyNode
      - config:
          complete: false
          destinationPath: working.jwtDecoded
          tokenTemplate: '{{data.query.jwt}}'
        id: PPoknMwYYQ
        meta:
          category: logic
          description: ''
          label: 'JWT: Decode'
          name: jwt-decode
          x: 640
          'y': 1260
        outputIds:
          - - KlGpwJhcyk
        type: JWTDecodeNode
      - config:
          bodyTemplate: |-
            {
                "type": "Bad Request",
                "message": "Invalid user and/or device"
            }
          bodyTemplateType: string
          cookieInfo: []
          headerInfo:
            - keyTemplate: Content-Type
              valueTemplate: application/json
          mqttTopicsTemplate: []
          replyIdPath: ''
          replyType: custom
          responseCodeTemplate: '400'
          sameSiteTemplate: ''
        id: QVhMTMBL6k
        meta:
          category: output
          description: ''
          label: User / Device Mismatch
          mqttTopicsType: []
          name: endpoint-reply
          x: 440
          'y': 1560
        outputIds:
          - - EjGed0u5xs
        type: EndpointReplyNode
      - config:
          bodyTemplate: |
            <!doctype html>
            <html>
              <head>
                <title></title>
                <meta name="viewport" content="width=device-width" />
                <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
              </head>
              <body>
                <p>Hello,</p>
                <p>The report you recently requested can be downloaded at the following URL:</p>
                <p><a href="{{data.body.downloadUrl}}">{{data.body.downloadUrl}}</a></p>
              </body>
            </html>
          fromTemplate: ''
          resultPath: working.emailResult
          subjectTemplate: Your Dashboard Report
          toAddresses:
            - '{{working.experienceUser.email}}'
        id: k2mLpuAsz8
        meta:
          category: output
          description: ''
          label: Email
          name: structure-email
          x: 640
          'y': 1460
        outputIds:
          - - 0_FUWpHbMc
        type: StructureEmailNode
      - config:
          bodyTemplate: |-
            {
                "success": true
            }
          bodyTemplateType: string
          cookieInfo: []
          headerInfo:
            - keyTemplate: Content-Type
              valueTemplate: application/json
          mqttTopicsTemplate: []
          replyIdPath: ''
          replyType: custom
          responseCodeTemplate: '200'
          sameSiteTemplate: ''
        id: 0_FUWpHbMc
        meta:
          category: output
          description: ''
          label: 200 OK
          mqttTopicsType: []
          name: endpoint-reply
          x: 640
          'y': 1560
        outputIds:
          - - EjGed0u5xs
        type: EndpointReplyNode
      - config: {}
        id: goklUbCqgI
        meta:
          annotationText: >-
            Use this Mutate Node to build the context object to apply to the
            dashboard report. You will need to modify this to build your chosen
            dashboard's context, which **could change depending on the dashboard
            being requested**. Currently, it is set up to pass the user making
            the request through an Experience User-type variable called
            `experienceUser`.


            This context object is then applied to the dashboard being generated
            for the user report.
          category: annotation
          height: 200
          label: Note
          name: note
          width: 600
          x: 900
          'y': 280
        outputIds: []
        type: AnnotationNode
      - config: {}
        id: SmquokjrSC
        meta:
          annotationText: >-
            The Losant API Node issues the request for the dashboard report,
            utilizing ...


            - The dashboard ID of the dashboard included in this template.

            - The context object constructed above. 

            - The theme and time from the request's query parameters.

            - The callback URL included in the template, along with the JWT as a
            query parameter.


            Feedback as to whether the request succeeded is provided to the user
            in the response.
          category: annotation
          height: 220
          label: Note
          name: note
          width: 600
          x: 900
          'y': 680
        outputIds: []
        type: AnnotationNode
      - config: {}
        id: s7Wst6yue0
        meta:
          annotationText: >
            On receipt of a request to this unauthenticated endpoint, verify the
            JWT included as a query param and decode it.
          category: annotation
          height: 100
          label: Note
          name: note
          width: 600
          x: 240
          'y': 980
        outputIds: []
        type: AnnotationNode
      - config: {}
        id: S_gBMHTg5C
        meta:
          annotationText: >-
            This template uses the Email Node for proving the concept, but we
            strongly recommend replacing this with a SendGrid Node that utilizes
            your account.
          category: annotation
          height: 120
          label: Note
          name: note
          width: 400
          x: 900
          'y': 1360
        outputIds: []
        type: AnnotationNode
      - config: {}
        id: n5P3irC6UJ
        meta:
          annotationText: >-
            While this request is not visible to any users, we reply to it
            anyways to keep the request from hanging and timing out.
          category: annotation
          height: 140
          label: Note
          name: note
          width: 280
          x: 220
          'y': 1460
        outputIds: []
        type: AnnotationNode
      - config:
          attachments: []
          bccAddresses: []
          bodyTemplate: |-
            <!doctype html>
            <html>
              <head>
                <title></title>
                <meta name="viewport" content="width=device-width" />
                <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
              </head>
              <body>
                <p>Hello,</p>
                <p>The report you recently requested can be downloaded at the following URL:</p>
                <p><a href="{{data.body.downloadUrl}}">{{data.body.downloadUrl}}</a></p>
              </body>
            </html>
          ccAddresses: []
          fromTemplate: 'noreply@{{data.headers.host}}'
          replyToTemplate: ''
          resultPath: working.emailResult
          sendgridApiKey: '{{globals.sendgridKey}}'
          subjectTemplate: Your Dashboard Report
          toAddresses:
            - '{{working.experienceUser.email}}'
        id: onPKRKqAMV
        meta:
          category: output
          description: ''
          label: SendGrid
          name: sendgrid
          x: 860
          'y': 1460
        outputIds: []
        type: SendgridEmailNode
      - config:
          emailOrIdTemplate: '{{working.jwtDecoded.expUserId}}'
          findMetadata: false
          findMethod: emailOrId
          findMultiple: false
          resultPath: working.experienceUser
          sortDirection: asc
          sortField: email
        id: KlGpwJhcyk
        meta:
          category: experience
          description: ''
          label: 'User: Get'
          name: get-experience-user
          x: 640
          'y': 1360
        outputIds:
          - - k2mLpuAsz8
        type: GetExperienceUserNode
      - config: {}
        id: mMhkqFw7OK
        meta:
          annotationText: >-
            You **must** [create a JWT service
            credential](/applications/recent/credentials/new/jwt) named "Sign
            Dashboard Export" to sign and then verify this request.
          category: annotation
          height: 100
          label: Note
          name: note
          width: 600
          x: 200
          'y': 500
        outputIds: []
        type: AnnotationNode
      - config:
          action: get
          params:
            - name: dashboardId
              type: string
              value: '{{data.params.dashboardId}}'
          resource: applicationDashboard
          responsePath: working.requestedDashboard
        id: ZlRQscyBFY
        meta:
          category: data
          description: ''
          label: Find Dashboard
          name: losantapi
          x: 540
          'y': 160
        outputIds:
          - - R5DxbdXx4m
        type: LosantApiNode
      - config:
          expression: '{{working.requestedDashboard.result.id}}'
        id: R5DxbdXx4m
        meta:
          category: logic
          description: ''
          label: Found?
          name: conditional
          x: 540
          'y': 260
        outputIds:
          - - YC0svF2sWS
          - - j2YKsXJCie
        type: ConditionalNode
      - config:
          expression: '{{data.method}} === ''post'''
        id: j2YKsXJCie
        meta:
          category: logic
          description: ''
          label: POST?
          name: conditional
          x: 640
          'y': 360
        outputIds:
          - - Ny4Ym0TIE7
          - - zxwW_HnbDt
        type: ConditionalNode
      - config:
          bodyTemplate: |-
            <!doctype html>
            <html lang="en" data-bs-theme="auto">
              <head>
                <meta charset="utf-8">
                <title>404 - Dashboard Not Found</title>
              </head>
              <body>
                <h1>404 - Dashboard Not Found</h1>
              </body>
            </html>
          bodyTemplateType: string
          cookieInfo: []
          headerInfo:
            - keyTemplate: Content-Type
              valueTemplate: text/html
          mqttTopicsTemplate: []
          replyIdPath: ''
          replyType: custom
          responseCodeTemplate: '404'
          sameSiteTemplate: ''
        id: YC0svF2sWS
        meta:
          category: output
          description: ''
          label: '404'
          mqttTopicsType: []
          name: endpoint-reply
          x: 440
          'y': 760
        outputIds:
          - - 6iiIBeIBpO
        type: EndpointReplyNode
      - config: {}
        id: 1cJuOaA64o
        meta:
          annotationText: >-
            Verify that the dashboardId passed in the URL resolves to a
            dashboard from your application. This only checks that the dashboard
            exists; it **does not check** if the Experience User making the
            request **should have access** to the dashboard.
          category: annotation
          height: 180
          label: Note
          name: note
          width: 380
          x: 140
          'y': 160
        outputIds: []
        type: AnnotationNode
      - config: {}
        id: l12r534qBP
        meta:
          annotationText: >-
            If the dashboard is not found, render a 404 response. Replace this
            with your existing 404 page if you have one.
          category: annotation
          height: 120
          label: Note
          name: note
          width: 300
          x: 180
          'y': 680
        outputIds: []
        type: AnnotationNode
      - config:
          rules:
            - destination: working.reportCtx
              type: set
              valueTemplate: |-
                {
                  "experienceUser": "{{experience.user.id}}"
                }
              valueTemplateType: json
        id: zxwW_HnbDt
        meta:
          category: logic
          description: ''
          label: Build Context
          name: mutate
          x: 860
          'y': 460
        outputIds:
          - - sMe6RVYDZk
        type: MutateNode
      - config:
          bodyTemplate: |-
            {
              "error": {
                "message": "Failed to generate report: {{defaultTo data.errorInfo.error.message 'An unknown error occurred'}}"
              }
            }
          bodyTemplateType: json
          cookieInfo: []
          headerInfo: []
          layoutIdTemplate: ''
          mqttTopicsTemplate: []
          pageIdTemplate: ~exportplaceholderid-experienceView-dashboardPage~
          replyIdPath: ''
          replyType: page
          responseCodeTemplate: '500'
          sameSiteTemplate: ''
        id: Asq7tivJHa
        meta:
          category: output
          description: ''
          label: 500 Error
          mqttTopicsType: []
          name: endpoint-reply
          x: 540
          'y': 1920
        outputIds:
          - - IDi51pOCRl
        type: EndpointReplyNode
      - config:
          level: error
          message: ''
          property: ''
        id: IDi51pOCRl
        meta:
          category: debug
          description: ''
          label: Debug
          name: debug
          x: 540
          'y': 2020
        outputIds: []
        type: DebugNode
      - config: {}
        id: x9C3VUX7st
        meta:
          annotationText: >-
            Return a 500 response if an uncaught exception occurs. This will
            most likely happen when the Service Credential for signing the JWT
            has not been created.


            You **must** [create a JWT service
            credential](/applications/recent/credentials/new/jwt) named "Sign
            Dashboard Export" to sign and then verify this request.
          category: annotation
          height: 220
          label: Note
          name: note
          width: 320
          x: 740
          'y': 1820
        outputIds: []
        type: AnnotationNode
      - config: {}
        id: hI9EvqbhT6
        meta:
          annotationText: >-
            You **must** [create a JWT service
            credential](/applications/recent/credentials/new/jwt) named "Sign
            Dashboard Export" to sign and then verify this request.
          category: annotation
          height: 140
          label: Note
          name: note
          width: 280
          x: 280
          'y': 1140
        outputIds: []
        type: AnnotationNode
    triggers:
      - config: {}
        key: >-
          ~exportplaceholderid-experienceEndpoint-getTlDashboardReportDashboardId~
        meta:
          category: trigger
          description: ''
          label: 'GET /tl-dashboard-report/{dashboardId}'
          name: endpoint
          uiId: lcpKEbuT1W
          x: 440
          'y': 60
        outputIds:
          - - ZlRQscyBFY
        type: endpoint
      - config: {}
        key: >-
          ~exportplaceholderid-experienceEndpoint-postTlDashboardReportDashboardId~
        meta:
          category: trigger
          description: ''
          label: 'POST /tl-dashboard-report/{dashboardId}'
          name: endpoint
          uiId: guXHPY75pD
          x: 640
          'y': 60
        outputIds:
          - - ZlRQscyBFY
        type: endpoint
      - config: {}
        key: ~exportplaceholderid-experienceEndpoint-postTlDashboardReportCb~
        meta:
          category: trigger
          description: ''
          label: Report Callback
          name: endpoint
          uiId: CV5t2HOx0G
          x: 540
          'y': 1060
        outputIds:
          - - Plp_G1XKYq
        type: endpoint
      - config:
          scope: local
        key: ~exportplaceholderid-flow-renderDashboardRequestReport~-flowError
        meta:
          category: trigger
          description: ''
          label: Workflow Error
          name: flowError
          uiId: D4h8239fpN
          x: 540
          'y': 1820
        outputIds:
          - - Asq7tivJHa
        type: flowError
    version: develop
version: 1
