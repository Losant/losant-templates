{{! Default variable values }}
{{#*inline 'id'}}{{defaultTo @args.id 'tl-google-map'}}{{/inline}}
{{#*inline 'height'}}{{defaultTo @args.height '640px'}}{{/inline}}
{{#*inline 'defaultZoom'}}{{defaultTo @args.defaultZoom 8}}{{/inline}}
{{#*inline 'defaultCenter'}}{{defaultTo @args.defaultCenter '39.108,-84.511'}}{{/inline}}

{{#with this as | devices |}}
{{#with @args as | args |}}

<div style="height: {{> height}};">
  <div id="{{> id}}" style="height: 100%"></div>
</div>
<script>
(function() {
  // Only write the script tag to the head if one has not already been written
  // this id is purposefully non-unique, as we only want to load the Google Maps API one time
  const scriptSrc = 'https://maps.googleapis.com/maps/api/js';
  if (!document.getElementById(scriptSrc)) {
    // Create the script tag, set the appropriate attributes
    const script = document.createElement('script');
    script.id = scriptSrc;
    script.src = `${scriptSrc}?key={{args.apiKey}}`;
    script.defer = true;
    // Append the 'script' element to 'head'
    document.head.appendChild(script);
  }
  window.addEventListener('load', () => {
    const map = new google.maps.Map(
      document.getElementById('{{> id}}'),
      {
        zoom: {{> defaultZoom}},
        center: new google.maps.LatLng({{> defaultCenter}})
      }
    );
    const mappedDevices = [
      {{#each devices}}
        {{#if (formatGps (template args.markerLatLngTemplate this))}}
          {
            coordinate: [{{formatGps (template args.markerLatLngTemplate this)}}],
            infoWindowContent: `{{#if args.infoWindowComponentName}}{{component args.infoWindowComponentName this}}{{else}}{{{template args.infoWindowTemplate this}}}{{/if}}`,
            icon: '{{{template args.markerIconTemplate this}}}',
            label: '{{template args.markerLabelTemplate this}}'
          },
        {{/if}}
      {{/each}}
    ];
    const infoWindow = new google.maps.InfoWindow(); 
    mappedDevices.forEach(({ icon, label, coordinate, infoWindowContent }) => {
      const marker = new google.maps.Marker({
        position: new google.maps.LatLng(...coordinate),
        label,
        icon,
        map
      });
      marker.addListener('click', () => {
        infoWindow.close(); // only allow one window open at a time
        if (infoWindowContent) {
          infoWindow.setContent(infoWindowContent);
          infoWindow.open(map, marker);
        }
      });
    });
  });
})();
</script>
{{/with}}
{{/with}}