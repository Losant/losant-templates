application.register("cpf-element-events-table", class extends Controller {

  static targets = [
    'perPage',
    'pagination',
    'customerSelect',
    'siteSelect',
    'siteSelectFrame',
    'dateRangeForm',
    'dateRangeTypeAfter',
    'dateRangeTypeBefore',
    'dateRangeTypeBetween',
    'dateRangeAfter',
    'dateRangeBefore',
    'dateRangeBetweenStart',
    'dateRangeBetweenEnd',
    'dateRangeTypeClear',
    'clientSideErrorMessage',
    'dateRangeModal',
    'dateRangeFilterLabel'
  ];

  static values = {
    page: Number,
    hideDeviceColumn: { type: Boolean, default: false },
    deviceId: String,
    query: Object
  };

  connect() {

    if (document.documentElement.hasAttribute("data-turbo-preview")) {
      return;
    }

    const tooltipTriggerList = this.element.querySelectorAll('[data-bs-toggle="tooltip"]')
    const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl))

    this.dateRangeModal = new bootstrap.Modal(this.dateRangeModalTarget);
  }

  // This element is inside the header, which is marked as permanent. This
  // means it's not always available when the controller connects. When the
  // date range filter connects, grab the query params and set the UI to match.
  dateRangeFilterLabelTargetConnected(element) {

    let label = element.querySelector('span');
    let tooltip = new bootstrap.Tooltip(label);

    if(this.queryValue.dateRangeAfter && Date.parse(this.queryValue.dateRangeAfter) !== NaN) {
      let date = new Date(this.queryValue.dateRangeAfter);
      this.dateRangeTypeAfterTarget.checked = true;
      this.dateRangeAfterTarget.value = this.getDateStringForInput(date);
      label.innerHTML = 'After date...';
      label.setAttribute('data-bs-original-title', `After ${date.toLocaleString()}`);
    } else if(this.queryValue.dateRangeBefore && Date.parse(this.queryValue.dateRangeBefore) !== NaN) {
      let date = new Date(this.queryValue.dateRangeBefore);
      this.dateRangeTypeBeforeTarget.checked = true;
      this.dateRangeBeforeTarget.value = this.getDateStringForInput(date);
      label.innerHTML = 'Before date...';
      label.setAttribute('data-bs-original-title', `Before ${date.toLocaleString()}`);
    } else if(
        this.queryValue.dateRangeBetweenStart &&
        this.queryValue.dateRangeBetweenEnd &&
        Date.parse(this.queryValue.dateRangeBetweenStart) !== NaN &&
        Date.parse(this.queryValue.dateRangeBetweenEnd) !== NaN
      ) {
      let dateStart = new Date(this.queryValue.dateRangeBetweenStart);
      let dateEnd = new Date(this.queryValue.dateRangeBetweenEnd);
      this.dateRangeTypeBetweenTarget.checked = true;
      this.dateRangeBetweenStartTarget.value = this.getDateStringForInput(dateStart);
      this.dateRangeBetweenEndTarget.value = this.getDateStringForInput(dateEnd);
      label.innerHTML = 'Between dates...';
      label.setAttribute('data-bs-original-title', `Between ${dateStart.toLocaleString()} and ${dateEnd.toLocaleString()}`);
    } else {
      label.innerHTML = 'Select dates...';
      label.setAttribute('data-bs-original-title', 'Click to filter by date range.');
    }
  }

  // Given a date object, returns a localized string formatted correctly for the
  // datetime-local input control (YYYY-MM-DDTHH:MM).
  // https://dev.to/kevinluo201/set-value-of-datetime-local-input-field-3435
  getDateStringForInput(date) {
    const year = date.getFullYear();
    const month = (date.getMonth() + 1).toString().padStart(2, "0");
    const day = date.getDate().toString().padStart(2, "0");
    const hours = date.getHours().toString().padStart(2, "0");
    const minutes = date.getMinutes().toString().padStart(2, "0");

    return `${year}-${month}-${day}T${hours}:${minutes}`;
  };


  updateFilters(event) {

    // This debouncing logic will only perform the filter request if the
    // user has stopped typing for 300ms. This prevents a bunch of requests
    // from overlapping on every typed character.

    if(this.filterDebounce) {
      clearTimeout(this.filterDebounce);
    }

    this.filterDebounce = setTimeout(() => {
      // Find all input elements with the data-filter attribute.
      let filterFields = this.element.querySelectorAll('[data-filter]');

      // Build array of name=value strings.
      let queryParams = Array.from(filterFields).map((f) => { return f.value !== '' ? `${f.dataset.filter}=${encodeURIComponent(f.value)}` : null });

      // Filter any nulls (there was no value in the input).
      queryParams = queryParams.filter((q) => { return q !== null });

      // Add the pagination options.
      queryParams.push(`perPage=${this.perPageTarget.value}`);

      // Add customer option.
      if(this.hasCustomerSelectTarget) {
        queryParams.push(`customer=${this.customerSelectTarget.value}`);
      }

      let page = this.pageValue;

      // If the user changed per page, set the page back to 0.
      // This is because if the user increased perPage, the
      // selected page number may be greater than the new number of pages.
      if(event.params.field === 'perPage') {
        page = 0;
      }

      // Clear any previous validation errors.
      this.dateRangeAfterTarget.setCustomValidity('');
      this.dateRangeBeforeTarget.setCustomValidity('');
      this.dateRangeBetweenStartTarget.setCustomValidity('');
      this.dateRangeBetweenEndTarget.setCustomValidity('');

      if(this.dateRangeTypeAfterTarget.checked) {
        if(!this.dateRangeAfterTarget.value) {
          if(this.dateRangeModalTarget.classList.contains('show')) {
            this.dateRangeAfterTarget.setCustomValidity("Date is required.");
            this.dateRangeAfterTarget.reportValidity();
            return;
          }
        } else {
          let date = new Date(this.dateRangeAfterTarget.value);
          queryParams.push(`dateRangeAfter=${date.toISOString()}`);
        }
      }

      if(this.dateRangeTypeBeforeTarget.checked) {
        if(!this.dateRangeBeforeTarget.value) {
          if(this.dateRangeModalTarget.classList.contains('show')) {
            this.dateRangeBeforeTarget.setCustomValidity("Date is required.");
            this.dateRangeBeforeTarget.reportValidity();
            return;
          }
        } else {
          let date = new Date(this.dateRangeBeforeTarget.value);
          queryParams.push(`dateRangeBefore=${date.toISOString()}`);
        }
      }

      if(this.dateRangeTypeBetweenTarget.checked) {
        if(!this.dateRangeBetweenStartTarget.value) {
          if(this.dateRangeModalTarget.classList.contains('show')) {
            this.dateRangeBetweenStartTarget.setCustomValidity("Date is required.");
            this.dateRangeBetweenStartTarget.reportValidity();
            return;
          }
        }

        if(!this.dateRangeBetweenEndTarget.value) {
          if(this.dateRangeModalTarget.classList.contains('show')) {
            this.dateRangeBetweenEndTarget.setCustomValidity("Date is required.");
            this.dateRangeBetweenEndTarget.reportValidity();
            return;
          }
        }

        let rangeStart = new Date(this.dateRangeBetweenStartTarget.value);
        let rangeEnd = new Date(this.dateRangeBetweenEndTarget.value);

        if(rangeStart > rangeEnd) {
          if(this.dateRangeModalTarget.classList.contains('show')) {
            this.dateRangeBetweenStartTarget.setCustomValidity("Start date must be before end date.");
            this.dateRangeBetweenStartTarget.reportValidity();
            return;
          }
        }

        queryParams.push(`dateRangeBetweenStart=${rangeStart.toISOString()}`);
        queryParams.push(`dateRangeBetweenEnd=${rangeEnd.toISOString()}`);
      }

      this.dateRangeModal.hide();

      // If the user changed the customer dropdown, need to reload the
      // sites dropdown with new parent customer selected and reset its value.
      if(event.params.group === 'customer') {

        let params = new URLSearchParams({
          level: 2,
          parentId: this.customerSelectTarget.value,
          placeholder: '-- All Sites --',
          actionMethod: 'updateFilters',
          actionGroupParamValue: 'site',
          controllerName: 'cpf-element-events-table',
          targetName: 'siteSelect'
        });
    
        this.siteSelectFrameTarget.src = `/cpf/elements/group-select?${params.toString()}`;
      }
      else {
        // Only add the site option if the customer has not changed.
        // If the customer changed, this gets reset to blank.
        // This dropdown will not exist if the user is assigned to
        // a site.
        if(this.hasSiteSelectTarget) {
          queryParams.push(`site=${this.siteSelectTarget.value}`);
        }
      }

      // If the user clicked "next", "last", "first", "last" icons,
      // grab the page from the event params that were put on those
      // elements.
      if('page' in event.params) {
        page = event.params.page;
      }

      queryParams.push(`page=${page}`);
      queryParams.push(`hideDeviceColumn=${this.hideDeviceColumnValue}`);

      if(this.deviceIdValue) {
        queryParams.push(`device=${this.deviceIdValue}`);
      }

      let newSrc = `/cpf/elements/events-table?${queryParams.join('&')}`;

      // Events take a while to load. Clear the results and show the spinner.
      this.element.querySelector('tbody').innerHTML = '';
      this.element.querySelector('tbody').innerHTML = `<img class="m-4 cpf-spinner" src="{{file 'spinner.gif'}}">`;

      // Hide the pagination while the new content is loading.
      this.paginationTarget.classList.add('d-none');

      // Reload the turbo frame and pass in all input fields on the query string.
      this.element.parentElement.src = newSrc;
    }, 300);

  }
});
