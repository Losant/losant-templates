resourceType: ExperienceFlowVersion
resources:
  - description: Created for Endpoint GET /cpf/elements/sites-table
    enabled: true
    exportHash: e8266c204a10ffec9b591d82ddad98da47128896cfec130443a3191a013af81d
    flowId: ~exportplaceholderid-flow-cpfElementsSitesTable~
    globals: []
    id: ~exportplaceholderid-flowVersion-cpfElementsSitesTable~
    name: cpf-elements-sites-table
    nodes:
      - config:
          bodyTemplate: pageData
          bodyTemplateType: path
          cookieInfo: []
          headerInfo: []
          layoutIdTemplate: ''
          mqttTopicsTemplate: []
          pageIdTemplate: ~exportplaceholderid-experienceView-cpfElementsSitesTable~
          replyIdPath: ''
          replyType: page
          responseCodeTemplate: '200'
          sameSiteTemplate: ''
        id: mtKIrm1v12
        meta:
          category: output
          description: ''
          label: 'Endpoint: Reply'
          mqttTopicsType: []
          name: endpoint-reply
          x: 280
          'y': 620
        outputIds:
          - - WOD1r8UxI8
        type: EndpointReplyNode
      - config:
          level: verbose
          message: ''
          property: ''
        id: WOD1r8UxI8
        meta:
          category: debug
          description: ''
          label: Debug
          name: debug
          x: 280
          'y': 720
        outputIds: []
        type: DebugNode
      - config:
          customNodeId: ~exportplaceholderid-flow-cpfQueryResources~
          customNodeVersion: default
          fields:
            - id: level
              value: '2'
            - id: parent
              value: '{{data.query.customer}}'
            - id: user
              value: experience.user
          isInstance: false
          resultPath: working.results
        id: 3eyhLHlj8s
        meta:
          description: ''
          label: 'CPF: Query Resources'
          name: custom-node-execute-node
          x: 280
          'y': 260
        outputIds:
          - - AT6FXlXN5c
          - - kJhNWnLFUk
        type: CustomNodeExecuteNode
      - config:
          rules:
            - destination: pageData.sites
              source: working.results.queryResultsWithTags
              type: copy
        id: kJhNWnLFUk
        meta:
          category: logic
          description: ''
          label: Mutate
          name: mutate
          x: 280
          'y': 380
        outputIds:
          - - 8udgvUtnlv
        type: MutateNode
      - config:
          customNodeId: ~exportplaceholderid-flow-cpfGetTenancyLevel~
          customNodeVersion: default
          fields:
            - id: user
              value: experience.user
          isInstance: false
          resultPath: pageData.userLevel
        id: HdAm2sAoUQ
        meta:
          category: experience
          description: ''
          label: 'CPF: Get Tenancy Level'
          name: custom-node-execute-node
          x: 160
          'y': 140
        outputIds:
          - - AT6FXlXN5c
          - - 3eyhLHlj8s
        type: CustomNodeExecuteNode
      - config:
          bodyTemplate: |-
            {
                "error": "User's group membership is invalid."
            }
          bodyTemplateType: string
          cookieInfo: []
          headerInfo: []
          mqttTopicsTemplate: []
          replyIdPath: ''
          replyType: custom
          responseCodeTemplate: '403'
          sameSiteTemplate: ''
        id: AT6FXlXN5c
        meta:
          category: output
          description: ''
          label: 'Endpoint: Reply'
          mqttTopicsType: []
          name: endpoint-reply
          x: 60
          'y': 380
        outputIds:
          - - Xn_pLcWRII
        type: EndpointReplyNode
      - config:
          level: verbose
          message: ''
          property: ''
        id: Xn_pLcWRII
        meta:
          category: debug
          description: ''
          label: Debug
          name: debug
          x: 60
          'y': 480
        outputIds: []
        type: DebugNode
      - config:
          scopePath: ''
          script: |-
            let sites = payload.pageData.sites;
            let filters = {
                name: payload.data.query.name,
                customer: payload.data.query.customer,
                contact: payload.data.query.contact
            };

            payload.working.filters = filters;

            // Filter by name
            if(filters.name) {
                sites = sites.filter((s) => {
                    return s.name.toLowerCase().includes(filters.name.toLowerCase());
                });
            }

            // Filter by primary contact
            if(filters.contact) {
                sites = sites.filter((s) => {
                    if(s.groupTags.contact) {
                        return s.groupTags.contact.toLowerCase().includes(filters.contact.toLowerCase());
                    } else {
                        return false;
                    }
                });
            }

            payload.pageData.sites = sites;
        id: 8udgvUtnlv
        meta:
          category: logic
          description: ''
          label: Function
          name: function
          x: 280
          'y': 480
        outputIds:
          - - mtKIrm1v12
        type: RawFunctionNode
      - config: {}
        id: YPYQZ9E77Q
        meta:
          annotationText: Apply the filters.
          category: annotation
          height: 120
          label: Note
          name: note
          width: 260
          x: 480
          'y': 480
        outputIds: []
        type: AnnotationNode
    triggers:
      - config: {}
        key: ~exportplaceholderid-experienceEndpoint-getCpfElementsSitesTable~
        meta:
          category: trigger
          description: ''
          label: GET /cpf/elements/sites-table
          name: endpoint
          uiId: qwylOVg0wo
          x: 160
          'y': 40
        outputIds:
          - - HdAm2sAoUQ
        type: endpoint
    version: develop
version: 1
