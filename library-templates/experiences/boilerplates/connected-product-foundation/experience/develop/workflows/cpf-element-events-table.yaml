resourceType: ExperienceFlowVersion
resources:
  - description: Created for Endpoint GET /cpf/elements/events-table
    enabled: true
    exportHash: 3c1347b4db72e2cd5696222ee50e83ec0179bd125e9bec7abf858a4f7ec56599
    flowId: ~exportplaceholderid-flow-cpfElementEventsTable~
    globals: []
    id: ~exportplaceholderid-flowVersion-cpfElementEventsTable~
    name: cpf-element-events-table
    nodes:
      - config:
          bodyTemplate: pageData
          bodyTemplateType: path
          cookieInfo: []
          headerInfo: []
          layoutIdTemplate: ''
          mqttTopicsTemplate: []
          pageIdTemplate: ~exportplaceholderid-experienceView-cpfElementEventsTable~
          replyIdPath: ''
          replyType: page
          responseCodeTemplate: '200'
          sameSiteTemplate: ''
        id: KQ7l3mbx6d
        meta:
          category: output
          description: ''
          label: 'Endpoint: Reply'
          mqttTopicsType: []
          name: endpoint-reply
          x: 500
          'y': 1180
        outputIds:
          - - 5bJ0zPhCsB
        type: EndpointReplyNode
      - config:
          level: verbose
          message: ''
          property: ''
        id: 5bJ0zPhCsB
        meta:
          category: debug
          description: ''
          label: Debug
          name: debug
          x: 500
          'y': 1280
        outputIds: []
        type: DebugNode
      - config:
          findMetadata: true
          findMultiple: true
          queryTemplate: '{{{jsonEncode working.query}}}'
          resultPath: pageData.events
          resultsPage: '{{defaultTo data.query.page 0}}'
          resultsPerPage: '{{defaultTo data.query.perPage 25}}'
          sortDirection: desc
          sortField: creationDate
        id: gPQ7wTwM0t
        meta:
          category: data
          description: ''
          label: 'Event: Get'
          mode: queryTemplateMultiple
          name: get-event
          x: 500
          'y': 640
        outputIds:
          - - _4TBGT80fA
        type: GetEventNode
      - config:
          statements:
            - expression: >-
                max(ceil({{pageData.events.totalCount}} /
                {{pageData.events.perPage}}), 1)
              resultPath: pageData.events.totalPages
        id: 68Rkoe_kXA
        meta:
          category: logic
          description: ''
          label: Math
          name: math
          x: 400
          'y': 860
        outputIds:
          - - yExGjXY6LO
        type: MathNode
      - config: {}
        id: tG7dDwZXJd
        meta:
          annotationText: >-
            Calculate the total number of event pages. If there was an error
            querying (invalid device ID, etc), just mutate zero events onto
            pageData.
          category: annotation
          height: 140
          label: Note
          name: note
          width: 280
          x: 800
          'y': 860
        outputIds: []
        type: AnnotationNode
      - config:
          scopePath: ''
          script: >-
            let and = [];

            let query = { '$and': and };

            let userLevel = payload.pageData.userLevel;

            let userGroupId = payload.experience.user.experienceGroups[0].id;


            // If the user is a customer (level=1) or site (level=2),

            // filter events by their cpf_customer or cpf_site tags.

            // The value of the tag should match the group in which the user
            belongs.

            if(userLevel > 0) { // customer or site
                and.push({
                    'eventTags': {
                        '$eq': {
                            '$tagKey': userLevel === 1 ? 'cpf_customer' : 'cpf_site',
                            '$tagValue': userGroupId
                        }
                    }
                });
            }


            if(payload.data.query.customer) {
                and.push({
                    "eventTags": {
                        "$eq": {
                            "$tagKey": 'cpf_customer',
                            "$tagValue": payload.data.query.customer
                        }
                    }
                });
            }


            if(payload.data.query.site) {
                and.push({
                    "eventTags": {
                        "$eq": {
                            "$tagKey": 'cpf_site',
                            "$tagValue": payload.data.query.site
                        }
                    }
                });
            }


            if(payload.data.query.subject) {
                and.push({
                    'subject': {
                        '$contains': payload.data.query.subject,
                        '$ci': true
                    }
                });
            }


            // Default the state to 'new' if not provided.

            payload.data.query.state = payload.data.query.state ?? 'new';


            if(payload.data.query.state && payload.data.query.state !== 'any') {
                and.push({
                    'state': {
                        '$eq': payload.data.query.state
                    }
                });
            }


            if(payload.data.query.level && payload.data.query.level !== 'any') {
                and.push({
                    'level': {
                        '$eq': payload.data.query.level
                    }
                });
            }


            if(payload.data.query.device) {
                and.push({
                    'deviceId': {
                        '$eq': payload.data.query.device
                    }
                });
            }


            payload.working = payload.working || {};

            payload.working.query = query;
        id: Lg4USsMYxk
        meta:
          category: logic
          description: ''
          label: Build Query
          name: function
          x: 500
          'y': 520
        outputIds:
          - - gPQ7wTwM0t
        type: RawFunctionNode
      - config: {}
        id: M5ePqqBGWn
        meta:
          annotationText: >-
            Build the event [advanced
            query](https://~exportplaceholderid-docs-url~/references/advanced-queries/)
            from the incoming filter fields.
          category: annotation
          height: 100
          label: Note
          name: note
          width: 260
          x: 700
          'y': 520
        outputIds: []
        type: AnnotationNode
      - config:
          customNodeId: ~exportplaceholderid-flow-cpfGetTenancyLevel~
          customNodeVersion: default
          fields:
            - id: user
              value: experience.user
          isInstance: false
          resultPath: pageData.userLevel
        id: TBpkImoV15
        meta:
          category: data
          description: ''
          label: 'CPF: Get Tenancy Level'
          name: custom-node-execute-node
          x: 300
          'y': 140
        outputIds:
          - - 4ajZYyWnfy
          - - iG8wOTQ5be
        type: CustomNodeExecuteNode
      - config:
          bodyTemplate: |-
            {
                "error": "User's group membership is invalid."
            }
          bodyTemplateType: string
          cookieInfo: []
          headerInfo:
            - keyTemplate: Content-Type
              valueTemplate: application/json
          mqttTopicsTemplate: []
          replyIdPath: ''
          replyType: custom
          responseCodeTemplate: '403'
          sameSiteTemplate: ''
        id: 4ajZYyWnfy
        meta:
          category: output
          description: ''
          label: 'Endpoint: Reply'
          mqttTopicsType: []
          name: endpoint-reply
          x: 200
          'y': 280
        outputIds:
          - - HGhy3Sh4cG
        type: EndpointReplyNode
      - config:
          level: verbose
          message: ''
          property: ''
        id: HGhy3Sh4cG
        meta:
          category: debug
          description: ''
          label: Debug
          name: debug
          x: 200
          'y': 360
        outputIds: []
        type: DebugNode
      - config:
          expression: '{{pageData.events.error}}'
        id: _4TBGT80fA
        meta:
          category: logic
          description: ''
          label: Error?
          name: conditional
          x: 500
          'y': 740
        outputIds:
          - - 68Rkoe_kXA
          - - FDS5AVimlB
        type: ConditionalNode
      - config:
          rules:
            - destination: pageData.events
              type: set
              valueTemplate: |-
                {
                  "totalPages": 1,
                  "page": 0,
                  "items": [],
                  "count": 0,
                  "perPage": {{defaultTo data.query.perPage 25}},
                  "totalCount": 0
                }
              valueTemplateType: json
        id: FDS5AVimlB
        meta:
          category: logic
          description: ''
          label: Mutate
          name: mutate
          x: 600
          'y': 860
        outputIds:
          - - KQ7l3mbx6d
        type: MutateNode
      - config:
          resultPath: working.groups
        id: yExGjXY6LO
        meta:
          category: experience
          description: ''
          label: 'Group: Summary'
          name: group-summary
          x: 400
          'y': 960
        outputIds:
          - - mRgMIT8Lf6
        type: ExperienceGroupSummaryNode
      - config:
          scopePath: ''
          script: >-
            let groupsMap = {};


            // Recursively traverses the group hierarchy

            // and builds a map of id:groupObj

            let flatten = (parent, group, level) => {
                if(group.id !== '(root)') {
                    group.level = level;
                    groupsMap[group.id] = group;

                    if(parent) {
                        group.parent = {
                            id: parent.id,
                            name: parent.name
                        };
                    }
                }

                let lvl = level + 1;;
                group.children.forEach((child) => {
                    flatten(group, child, lvl);
                });

                delete group.children;
            };


            flatten(null, payload.working.groups, -1);


            payload.pageData.events.items.forEach((e) => {
                e.customer = groupsMap[e.eventTags.cpf_customer];
                e.site = groupsMap[e.eventTags.cpf_site];
            });


            // If no customer ID was provided, we can use the user's current
            group ID

            // if they are a member of a customer group.

            payload.pageData.customerId = payload.data.query.customer;


            // A customer ID was not provided.

            if(!payload.pageData.customerId) {
                // The user is a member of a customer group.
                if(payload.pageData.userLevel === 1) {
                    // Set the customer ID to the user's group ID.
                    payload.pageData.customerId = payload.experience.user.experienceGroups[0].id;
                }
            }


            // If we still don't have a customer ID, we can use the parent

            // if a site was provided.

            if(!payload.pageData.customerId && payload.data?.query?.site) {
                let site = groupsMap[payload.data.query.site];
                payload.pageData.customerId = site.parent.id;
            }


            payload.working.groupsMap = groupsMap;
        id: mRgMIT8Lf6
        meta:
          category: logic
          description: ''
          label: Function
          name: function
          x: 400
          'y': 1060
        outputIds:
          - - KQ7l3mbx6d
        type: RawFunctionNode
      - config:
          bodyTemplate: pageData
          bodyTemplateType: path
          cookieInfo: []
          headerInfo: []
          layoutIdTemplate: ''
          mqttTopicsTemplate: []
          pageIdTemplate: ~exportplaceholderid-experienceView-cpfElementEventsTable~
          replyIdPath: ''
          replyType: page
          responseCodeTemplate: '200'
          sameSiteTemplate: ''
        id: MIiionzJo9
        meta:
          category: output
          description: ''
          label: 'Endpoint: Reply'
          mqttTopicsType: []
          name: endpoint-reply
          x: 300
          'y': 600
        outputIds:
          - - poozdj3H2T
        type: EndpointReplyNode
      - config:
          level: verbose
          message: ''
          property: ''
        id: poozdj3H2T
        meta:
          category: debug
          description: ''
          label: Debug
          name: debug
          x: 300
          'y': 680
        outputIds: []
        type: DebugNode
      - config:
          rules:
            - destination: pageData.events
              type: set
              valueTemplate: |-
                {
                  "totalPages": 1,
                  "page": 0,
                  "items": [],
                  "count": 0,
                  "perPage": {{defaultTo data.query.perPage 25}},
                  "totalCount": 0
                }
              valueTemplateType: json
        id: _qIhVgk99K
        meta:
          category: logic
          description: ''
          label: Mutate
          name: mutate
          x: 300
          'y': 520
        outputIds:
          - - MIiionzJo9
        type: MutateNode
      - config:
          customNodeId: ~exportplaceholderid-flow-cpfVerifyGroups~
          customNodeVersion: default
          fields:
            - id: userId
              value: '{{experience.user.id}}'
            - id: customerId
              value: '{{data.query.customer}}'
            - id: siteId
              value: '{{data.query.site}}'
          isInstance: false
          resultPath: ''
        id: iG8wOTQ5be
        meta:
          category: experience
          description: ''
          label: 'CPF: Verify Groups'
          name: custom-node-execute-node
          x: 400
          'y': 360
        outputIds:
          - - _qIhVgk99K
          - - Lg4USsMYxk
        type: CustomNodeExecuteNode
      - config: {}
        id: uICxoNZgR_
        meta:
          annotationText: >-
            Make sure the incoming site and/or customer query parameters are
            valid.
          category: annotation
          height: 120
          label: Note
          name: note
          width: 320
          x: 600
          'y': 360
        outputIds: []
        type: AnnotationNode
      - config: {}
        id: enIFKS2Aoe
        meta:
          annotationText: >-
            Appends the customer and site group information to each event. This
            function node also defaults the customer ID based on incoming
            filters and the user's membership.
          category: annotation
          height: 140
          label: Note
          name: note
          width: 360
          x: 20
          'y': 1060
        outputIds: []
        type: AnnotationNode
    triggers:
      - config: {}
        key: ~exportplaceholderid-experienceEndpoint-getCpfElementsEventsTable~
        meta:
          category: trigger
          description: ''
          label: GET /cpf/elements/events-table
          name: endpoint
          uiId: _ajwKUAVCU
          x: 300
          'y': 40
        outputIds:
          - - TBpkImoV15
        type: endpoint
    version: develop
version: 1
