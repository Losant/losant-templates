resourceType: Flow
resources:
  - description: ''
    flowClass: cloud
    globals: []
    id: ~losant-flow-endpointResetPassword-1~
    name: Endpoint /reset-password
    nodes:
      - config:
          errorPath: decodeTokenError
          issuerTemplate: '{{applicationId}}'
          secretTemplate: '{{globals.jwtSecret}}'
          tokenTemplate: '{{data.query.token}}'
        id: SJclKiu0-
        meta:
          category: logic
          description: 'Do we have a token, and is it valid? (e.g. Has it expired?)'
          label: Token valid?
          name: jwt-verify
          x: 540
          'y': 420
        outputIds:
          - - rkFJB2O0Z
          - - ryQrtoOR-
        type: JWTVerifyNode
      - config:
          destinationPath: decodedToken
          tokenTemplate: '{{data.query.token}}'
        id: ryQrtoOR-
        meta:
          category: logic
          description: Decode the token and store the result on the payload.
          label: 'JWT: Decode'
          name: jwt-decode
          x: 620
          'y': 520
        outputIds:
          - - S1S2GpuCW
        type: JWTDecodeNode
      - config:
          bodyTemplate: /forgot-password?resetError=true
          bodyTemplateType: string
          cookieInfo: []
          headerInfo: []
          replyIdPath: ''
          replyType: redirect
          responseCodeTemplate: '302'
        id: rkFJB2O0Z
        meta:
          category: output
          description: >-
            The original request will never succeed. Redirect to
            /forgot-password so the user can start over.
          label: Token error redirect
          name: endpoint-reply
          x: 340
          'y': 1520
        outputIds:
          - - rkSK-TdRZ
        type: EndpointReplyNode
      - config:
          bodyTemplate: |-
            {
              "resetPasswordFailure": {{jsonEncode errorMessage}}
            }
          bodyTemplateType: json
          cookieInfo: []
          headerInfo: []
          layoutIdTemplate: ''
          pageIdTemplate: ''
          replyIdPath: ''
          replyType: page
          responseCodeTemplate: '401'
        id: Hk_BF3uAZ
        meta:
          category: output
          description: An error occurred. Render the reset password page with an error.
          label: Reset Failure
          name: endpoint-reply
          x: 740
          'y': 1520
        outputIds:
          - - rkSK-TdRZ
        type: EndpointReplyNode
      - config:
          message: ''
          property: ''
        id: rkSK-TdRZ
        meta:
          category: output
          description: Log the requests hitting these endpoints.
          label: Debug
          name: debug
          x: 740
          'y': 1620
        outputIds: []
        type: DebugNode
      - config:
          emailOrIdTemplate: '{{decodedToken.id}}'
          findMethod: emailOrId
          resultPath: userFromToken
        id: S1S2GpuCW
        meta:
          category: experience
          description: Get the user by the ID found in the token.
          label: Get User
          name: get-experience-user
          x: 620
          'y': 620
        outputIds:
          - - B1g7LU50-
        type: GetExperienceUserNode
      - config:
          expression: '{{userFromToken.email}} === {{decodedToken.email}}'
        id: Syv1P6u0b
        meta:
          category: logic
          description: >-
            Check to make sure the email in the token matches the email on the
            user. If not, something is fishy and we should bail.
          label: Token / User Match?
          name: conditional
          x: 700
          'y': 820
        outputIds:
          - - rkFJB2O0Z
          - - rJaYLU9AZ
        type: ConditionalNode
      - config:
          expression: '{{ data.method }} == ''post'''
        id: BkZtv6dC-
        meta:
          category: logic
          description: Was this a form submission?
          label: POST request?
          name: conditional
          x: 860
          'y': 1020
        outputIds:
          - - HykjP6d0Z
          - - BJn1opdR-
        type: ConditionalNode
      - config:
          bodyTemplateType: none
          cookieInfo: []
          headerInfo: []
          layoutIdTemplate: ''
          pageIdTemplate: ''
          replyIdPath: ''
          replyType: page
          responseCodeTemplate: '200'
        id: HykjP6d0Z
        meta:
          category: output
          description: Render the reset page.
          label: Render Reset Page
          name: endpoint-reply
          x: 540
          'y': 1520
        outputIds:
          - - rkSK-TdRZ
        type: EndpointReplyNode
      - config:
          errorsPath: ''
          schema: "{\n\t\"type\": \"object\",\n  \"properties\": {\n    \"email\": {\n    \t\"type\": \"string\",\n      \"format\": \"email\"\n    },\n    \"password\": {\n    \t\"type\": \"string\",\n      \"minLength\": 8,\n      \"maxLength\": 255\n    }\n  },\n  \"required\": [\"email\", \"password\"],\n  \"additionalProperties\": false\n}"
          toValidatePath: data.body
        id: BJn1opdR-
        meta:
          category: logic
          description: Validate the data submitted in the post request.
          label: Validate Payload
          name: validate-payload
          x: 940
          'y': 1120
        outputIds:
          - - SJdEsa_RW
          - - SJZ5sTuR-
        type: ValidatePayloadNode
      - config:
          rules:
            - destination: errorMessage
              type: set
              valueTemplate: Email or password format is invalid.
        id: SJdEsa_RW
        meta:
          category: logic
          description: User submitted data that fails validation.
          label: Set Error Message
          name: mutate
          x: 640
          'y': 1420
        outputIds:
          - - Hk_BF3uAZ
        type: MutateNode
      - config:
          expression: '{{data.body.email}} === {{decodedToken.email}}'
        id: SJZ5sTuR-
        meta:
          category: logic
          description: >-
            Check to make sure the email in the post body matches the email on
            the token. If not, throw an error.
          label: Token / Submission Match?
          name: conditional
          x: 1020
          'y': 1220
        outputIds:
          - - H1v2spORW
          - - r1cn7C_CW
        type: ConditionalNode
      - config:
          rules:
            - destination: errorMessage
              type: set
              valueTemplate: Email does not match token's value.
        id: H1v2spORW
        meta:
          category: logic
          description: >-
            The email address in the token does not match the email address we
            have on file for the user.
          label: Set Error Message
          name: mutate
          x: 840
          'y': 1420
        outputIds:
          - - Hk_BF3uAZ
        type: MutateNode
      - config:
          dataMethod: individualFields
          emailOrIdTemplate: '{{decodedToken.id}}'
          emailTemplate: ''
          firstNameTemplate: ''
          invalidateExistingTokens: false
          lastNameTemplate: ''
          passwordTemplate: '{{data.body.password}}'
          resultPath: updatedUser
          userTags: []
        id: r1cn7C_CW
        meta:
          category: experience
          description: Set the new password and invalidate any existing tokens.
          label: Update User
          name: update-experience-user
          x: 1040
          'y': 1320
        outputIds:
          - - rJfd4CO0-
        type: UpdateExperienceUserNode
      - config:
          emailOrIdTemplate: '{{updatedUser.id}}'
          invalidateExistingTokens: true
          resultPath: newToken
          ttlTemplate: ''
        id: rJfd4CO0-
        meta:
          category: experience
          description: >-
            Password was successfully changed. Generate a new auth token for the
            user and invalidate any existing tokens.
          label: Generate Token
          name: experience-user-token
          x: 1040
          'y': 1420
        outputIds:
          - - S1UpE0dCZ
        type: ExperienceUserTokenNode
      - config:
          bodyTemplate: /
          bodyTemplateType: string
          cookieInfo:
            - maxAgeTemplate: ''
              nameTemplate: authorization
              valueTemplate: '{{newToken}}'
          headerInfo: []
          replyIdPath: ''
          replyType: redirect
          responseCodeTemplate: '302'
        id: S1UpE0dCZ
        meta:
          category: output
          description: >-
            Redirect the user to the home page and set the new token as a
            cookie.
          label: Go to /
          name: endpoint-reply
          x: 940
          'y': 1520
        outputIds:
          - - rkSK-TdRZ
        type: EndpointReplyNode
      - config:
          expression: '{{userFromToken.id}}'
        id: B1g7LU50-
        meta:
          category: logic
          description: Check to make sure we found a user by that ID.
          label: User exists?
          name: conditional
          x: 620
          'y': 720
        outputIds:
          - - rkFJB2O0Z
          - - Syv1P6u0b
        type: ConditionalNode
      - config:
          expression: >-
            {{formatDate userFromToken.passwordLastUpdated 'X'}} <
            {{decodedToken.iat}}
        id: rJaYLU9AZ
        meta:
          category: logic
          description: >-
            Check the token's issue time against the last time the user's
            password was reset. If reset happened after the issue date, don't
            honor the token.
          label: Password not reset yet?
          name: conditional
          x: 780
          'y': 920
        outputIds:
          - - rkFJB2O0Z
          - - BkZtv6dC-
        type: ConditionalNode
    triggers:
      - config: {}
        key: missing-key
        meta:
          category: trigger
          description: When a user submits the reset password form ...
          label: POST /reset-password
          name: endpoint
          uiId: rJeDT73u0b
          x: 440
          'y': 320
        outputIds:
          - - SJclKiu0-
        type: endpoint
      - config: {}
        key: missing-key
        meta:
          category: trigger
          description: When a user visits the reset password page ...
          label: GET /reset-password
          name: endpoint
          uiId: BkbD6Q3d0W
          x: 640
          'y': 320
        outputIds:
          - - SJclKiu0-
        type: endpoint
version: 1
