resourceType: ExperienceFlowVersion
resources:
  - enabled: true
    flowId: ~exportplaceholderid-flow-postTlSaml-1~
    globals: []
    id: ~exportplaceholderid-flowVersion-postTlSaml-1~
    name: POST /tl-saml
    nodes:
      - config:
          idpMetadataTemplate: '{{working.identityProvider}}'
          resultPath: working.samlUser
          samlResponseTemplate: '{{data.body.SAMLResponse}}'
          spMetadataTemplate: '{{working.serviceProvider}}'
        id: uagpIJ0vcU
        meta:
          category: experience
          description: ''
          id: w6ub1d8KhP
          label: 'SAML: Verify'
          name: saml-verify
          x: 400
          'y': 640
        outputIds:
          - - nhwIz95rdF
          - - kIqDOj2fC7
        type: SamlVerifyNode
      - config:
          message: ''
          property: ''
        id: ptEFKHkDLU
        meta:
          category: output
          description: ''
          id: 12h8KilMkx
          label: Debug
          name: debug
          x: 260
          'y': 900
        outputIds: []
        type: DebugNode
      - config:
          bodyTemplate: |-
            {
              "loginFailure": true,
              "email": {{jsonEncode data.body.email}}
            }
          bodyTemplateType: json
          cookieInfo: []
          headerInfo: []
          layoutIdTemplate: ''
          mqttTopicsTemplate: []
          pageIdTemplate: 5f7f3d2f8e6fd500078196d8
          replyIdPath: ''
          replyType: page
          responseCodeTemplate: '401'
          sameSiteTemplate: ''
        id: nhwIz95rdF
        meta:
          category: output
          description: >-
            Invalid credentials. Return the user to the login page and alert
            them of the error.
          label: Login Failure
          mqttTopicsType: []
          name: endpoint-reply
          x: 260
          'y': 800
        outputIds:
          - - ptEFKHkDLU
        type: EndpointReplyNode
      - config:
          emailOrIdTemplate: '{{working.emailAddress}}'
          findMetadata: false
          findMethod: emailOrId
          findMultiple: false
          resultPath: working.experienceUser
          sortDirection: asc
          sortField: email
        id: kIqDOj2fC7
        meta:
          category: experience
          description: ''
          id: sWEqShlHv7
          label: 'User: Get'
          name: get-experience-user
          x: 520
          'y': 780
        outputIds:
          - - ahB09muB2Q
        type: GetExperienceUserNode
      - config:
          expression: '{{working.experienceUser}}'
        id: ahB09muB2Q
        meta:
          category: logic
          description: ''
          id: 45itwDUVcj
          label: Use Exists?
          name: conditional
          x: 520
          'y': 900
        outputIds:
          - - FBOBTvdQY-
          - - yvyfWukS_r
        type: ConditionalNode
      - config:
          dataMethod: individualFields
          emailTemplate: '{{working.emailAddress}}'
          firstNameTemplate: ''
          groupIdTemplates: []
          lastNameTemplate: ''
          passwordTemplate: '{{working.uuid}}'
          resultPath: working.experienceUser
          userTags: []
        id: SJ65Z4OZgg
        meta:
          category: experience
          description: ''
          id: jUodx9JrJr
          label: 'User: Create'
          name: create-experience-user
          x: 480
          'y': 1140
        outputIds:
          - - yvyfWukS_r
        type: CreateExperienceUserNode
      - config:
          message: '{{data.responseToken}}'
          property: ''
        id: rRc41DUwYT
        meta:
          category: output
          description: ''
          id: 12h8KilMkx
          label: Debug
          name: debug
          x: 720
          'y': 1460
        outputIds: []
        type: DebugNode
      - config:
          bodyTemplate: /
          bodyTemplateType: string
          cookieInfo:
            - maxAgeTemplate: ''
              nameTemplate: authorization
              pathTemplate: /
              valueTemplate: '{{working.responseToken}}'
          headerInfo: []
          mqttTopicsTemplate: []
          replyIdPath: ''
          replyType: redirect
          responseCodeTemplate: '302'
          sameSiteTemplate: ''
        id: YFhKUVgF7x
        meta:
          category: output
          description: >-
            Successful login. Redirect the user to the home page and set the
            auth cookie for future requests.
          label: Set cookie & redirect to home
          mqttTopicsType: []
          name: endpoint-reply
          x: 720
          'y': 1360
        outputIds:
          - - rRc41DUwYT
        type: EndpointReplyNode
      - config:
          emailOrIdTemplate: '{{working.emailAddress}}'
          invalidateExistingTokens: false
          resultPath: working.responseToken
          ttlTemplate: ''
        id: yvyfWukS_r
        meta:
          category: experience
          description: ''
          id: BKG0kEhGVB
          label: Generate Token
          name: experience-user-token
          x: 720
          'y': 1240
        outputIds:
          - - YFhKUVgF7x
        type: ExperienceUserTokenNode
      - config: {}
        id: YD-AOKdXJO
        meta:
          annotationText: Verifying the Active Directory response
          category: annotation
          height: 100
          label: Note
          name: note
          width: 260
          x: 600
          'y': 620
        outputIds: []
        type: AnnotationNode
      - config: {}
        id: ZmUOf6gXRj
        meta:
          annotationText: >
            Checks to see if this user exists in Losant as an Experience User. 


            If the user doesn't exist, we can create an Experience User for the
            user at this email.


            After, we can generate a token and set the authorization cookie for
            that user.
          category: annotation
          height: 260
          label: Note
          name: note
          width: 260
          x: 780
          'y': 840
        outputIds: []
        type: AnnotationNode
      - config:
          destinationPath: working.uuid
          idTypeTemplate: uuidv4
        id: FBOBTvdQY-
        meta:
          category: logic
          description: ''
          id: FaORS4tqik
          label: Generate ID
          name: generate-id
          x: 480
          'y': 1040
        outputIds:
          - - SJ65Z4OZgg
        type: GenerateIdNode
      - config: {}
        id: PBuIDxxtea
        meta:
          annotationText: Generate password for user.
          category: annotation
          height: 100
          label: Note
          name: note
          width: 160
          x: 300
          'y': 980
        outputIds: []
        type: AnnotationNode
      - config: {}
        id: QttaJm-Wim
        meta:
          annotationText: >-
            FYI: User: Create Node


            If you would like to set up defaults for a user, you may do so in
            the User: Create Node. 


            One reason you may want to do this is to automatically add the user
            to an Experience Group.
          category: annotation
          height: 220
          label: Note
          name: note
          width: 260
          x: 200
          'y': 1140
        outputIds: []
        type: AnnotationNode
      - config:
          rules:
            - destination: working.SAMLResponse
              type: set
              valueTemplate: '{{{decodeBase64 data.body.SAMLResponse}}}'
        id: chZWX0F1UY
        meta:
          category: logic
          description: ''
          id: IWZj3EfVB0
          label: Decode
          name: mutate
          x: 400
          'y': 120
        outputIds:
          - - lekY0TCLmB
        type: MutateNode
      - config:
          documentPath: working.SAMLResponse
          resultFormatTemplate: json
          resultPath: working.emailAddress
          selectorTemplate: >-
            AttributeStatement
            Attribute[Name="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress"]
        id: lekY0TCLmB
        meta:
          category: logic
          description: ''
          id: baSgDJ2LbW
          label: HTML/XML Parser
          name: html-parser
          x: 400
          'y': 200
        outputIds:
          - - GLvA-FlFSA
        type: HtmlParserNode
      - config:
          method: split
          methodArgs:
            - '@'
          resultPath: working.email.split
          sourceData: '{{working.emailAddress}}'
        id: ciTT8HWt73
        meta:
          category: logic
          description: ''
          id: KtOx3kQXGH
          label: String
          name: string
          x: 400
          'y': 360
        outputIds:
          - - mMSo7myKxc
        type: StringNode
      - config:
          method: replaceAll
          methodArgs:
            - .
            - _
          resultPath: working.email.underscore
          sourceData: '{{working.email.split.[1]}}'
        id: mMSo7myKxc
        meta:
          category: logic
          description: ''
          id: KtOx3kQXGH
          label: String
          name: string
          x: 400
          'y': 440
        outputIds:
          - - rfEVe6nt2p
        type: StringNode
      - config:
          rules:
            - destination: working.serviceProviderGlobal
              type: set
              valueTemplate: 'serviceProviderMetadataTemplate_{{working.email.underscore}}'
            - destination: working.identityProviderGlobal
              type: set
              valueTemplate: 'identityProviderMetadataTemplate_{{working.email.underscore}}'
            - destination: working.serviceProvider
              type: set
              valueTemplate: |-
                {{{ decodeURIComponent 
                     (lookup globals working.serviceProviderGlobal)
                }}}
            - destination: working.identityProvider
              type: set
              valueTemplate: |-
                {{{ decodeURIComponent 
                     (lookup globals working.identityProviderGlobal)
                }}}
        id: rfEVe6nt2p
        meta:
          category: logic
          description: ''
          id: 4ZpiJ40lG_
          label: Mutate
          name: mutate
          x: 400
          'y': 520
        outputIds:
          - - uagpIJ0vcU
        type: MutateNode
      - config:
          rules:
            - destination: working.emailAddress
              type: set
              valueTemplate: >-
                {{working.emailAddress.[0].children.[0].children.[0].children.[0].value}}
        id: GLvA-FlFSA
        meta:
          category: logic
          description: ''
          id: GLvA-FlFSA
          label: Mutate
          name: mutate
          x: 400
          'y': 280
        outputIds:
          - - ciTT8HWt73
        type: MutateNode
      - config: {}
        id: woJq-PPGaB
        meta:
          annotationText: Do an early parse of the XML to determine email address.
          category: annotation
          height: 220
          label: Note
          name: note
          width: 260
          x: 600
          'y': 120
        outputIds: []
        type: AnnotationNode
      - config: {}
        id: vDpGWadWPM
        meta:
          annotationText: |-
            Look up SSO global via email domain:

            1. Split Email at "@"
            2. Convert "." to "_"
            3. Look up global at: 
            ```
            identityProviderMetadataTemplate_{{working.email.underscore}}
            ```
          category: annotation
          height: 220
          label: Note
          name: note
          width: 360
          x: 600
          'y': 360
        outputIds: []
        type: AnnotationNode
    triggers:
      - config: {}
        key: ~exportplaceholderid-experienceEndpoint-postTlSaml-1~
        meta:
          category: trigger
          description: ''
          id: z7125GjD1O
          label: POST /tl-saml
          name: endpoint
          uiId: IlS4GzgMHh
          x: 400
          'y': 40
        outputIds:
          - - chZWX0F1UY
        type: endpoint
    version: develop
version: 1
