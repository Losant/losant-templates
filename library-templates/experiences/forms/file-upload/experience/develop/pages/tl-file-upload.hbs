<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css" integrity="sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk" crossorigin="anonymous">
    <title>File Upload Form</title>
  </head>
  <body class="p-5">
    <div class="container-fluid">
      <div class="row justify-content-center">
        <div class="col-lg-6 col-md-8 col-sm-12">
          {{!
            PAGE_START: To include this as a page within an existing experience layout,
            keep everything between PAGE_START and PAGE_END. All other content can be
            removed since it's provided by the surrounding layout.
          }}

          {{#*inline "formId"}}file-upload-form{{/inline}}
          {{#*inline "postUrl"}}{{request.path}}{{/inline}} {{!-- defaults to the same URL serving the page (will be a POST request instead of GET) --}}

          <h1>Upload File</h1>

          <form id="{{> formId}}">
            <div class="form-group">
              <label for="__fileInfo__">Select a File</label>
              <input
                type="file"
                accept="{{globals.accept}}"
                class="form-control-file"
                id="__fileInfo__"
                name="__fileInfo__"
                required
              >
            </div>
            <button type="submit" class="btn btn-success">Submit File</button>
          </form>
          <div id="{{> formId}}-feedback"></div>
          <script>
            (function() {
              const form = document.getElementById('{{> formId}}');
              const formFeedback = document.getElementById('{{> formId}}-feedback');
              const submitBtn = form.querySelector('button[type="submit"]');
              const fileInput = form.querySelector('input[name="__fileInfo__"]');
              const submitBtnContent = submitBtn.innerHTML;

              function workingToFeedback(message = 'An unknown error occurred.', type = 'danger') {
                submitBtn.disabled = false;
                submitBtn.innerHTML = submitBtnContent;
                const feedback = document.createElement('div');
                feedback.classList.add('alert', `alert-${type}`, 'mt-3', 'text-break');
                feedback.innerHTML = message;
                formFeedback.appendChild(feedback);
              }

              form.addEventListener('submit', async (e) => {
                // 1. On submit, prevent the default behavior and add user-facing feedback.
                e.preventDefault();
                // add feedback to the submit button
                // and reset any previous feedback
                submitBtn.disabled = true;
                submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Uploading ...';
                formFeedback.innerHTML = ''; // replace any previous feedback

                // 2. Make a request to our experience endpoint for a signed URL
                // build our request object
                const data = new FormData(form);
                const { name, size, type } = data.get('__fileInfo__');
                data.set('__fileInfo__', JSON.stringify({
                  name,
                  fileSize: size,
                  contentType: type
                }));
                // make the request
                let signedUrlRequest;
                try {
                  signedUrlRequest = await fetch(
                    '{{> postUrl}}', // change this to the endpoint where we are POSTing to get a signed URL
                    {
                      method: 'POST',
                      body: data
                    }
                  );
                } catch (err) {
                  // failed to get a signed URL. In most cases, if we're here, it's because of a network error. 
                  return workingToFeedback(err.message);
                }
                let signedUrlResult;
                try {
                  signedUrlResult = await signedUrlRequest.json();
                } catch (err) {
                  return workingToFeedback(err.message);
                }

                // 3. if we have a signed URL, make our request
                if (signedUrlResult && signedUrlResult.url) {

                  const uploadData = new FormData();

                  Object.keys(signedUrlResult.fields || {}).forEach((key) => {
                    uploadData.append(key, signedUrlResult.fields[key]);
                  });
                  uploadData.append('file', fileInput.files[0]);

                  let uploadRequest;
                  try {
                    uploadRequest = await fetch(
                      signedUrlResult.url,
                      {
                        method: 'POST',
                        body: uploadData
                      }
                    );
                  } catch (err) {
                    // again, this case is usually network error
                    return workingToFeedback(err.message);
                  }
                  // failed to upload to signed URL
                  if (!uploadRequest.ok) {
                    let resultText;
                    try {
                      resultText = await uploadRequest.text();
                    } catch (e) {
                      // no need to set a default here
                    }
                    return workingToFeedback(resultText);
                  }
                  // success!
                  // reset our file input
                  fileInput.value = null;
                  return workingToFeedback('File uploaded.', 'success');
                } else {
                  // error getting our signed URL
                  return workingToFeedback(signedUrlResult && signedUrlResult && signedUrlResult.message);
                }
              });
            })();
          </script>

          {{! PAGE_END }}

        </div>
      </div>
    </div>
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js" integrity="sha384-OgVRvuATP1z7JjHLkuOU7Xw704+h835Lr+6QL9UvYjZE3Ipu6Tp75j7Bh/kR0JKI" crossorigin="anonymous"></script>
  </body>
</html>