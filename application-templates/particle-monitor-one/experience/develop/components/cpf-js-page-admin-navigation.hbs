application.register("cpf-page-admin-navigation", class extends Controller {

  static outlets = ["cpf-element-nav"];
  static targets = ["navLabel", "navIcon", "navURL", "navTenancyLevel", "navParent", "navOrder", "navRole", "navHiddenInput", "navForm", "formContainer", "selectItemAlert"];


  connect() {
    if (document.documentElement.hasAttribute("data-turbo-preview")) {
      return;
    }
  };

  cpfElementNavOutletConnected(outlet, element) {
    if (outlet.whichValue === 'top') {
      this.navTop = outlet;
      this.navItemClick({
        detail: {
          navItem: outlet.topNavItemsValue[0],
          controller: outlet
        }
      });
    } else {
      this.navBottom = outlet;
    }

    element.addEventListener('cpf_element_nav_click', this.navItemClick.bind(this));
  };

  cpfElementNavOutletDisconnected(outlet, element) {
    element.removeEventListener('cpf_element_nav_click', this.navItemClick.bind(this));
  }

  navItemClick(e) {
    let controller = e.detail.controller;
    let navItem = e.detail.navItem;
    let navParentSelect = this.navParentTarget;

    // If nothing is selected, hide the form and show
    // an alert to add or select an item.
    if(!navItem) {
      this.formContainerTarget.classList.add('d-none');
      this.selectItemAlertTarget.classList.remove('d-none');
      return;
    } else {
      this.formContainerTarget.classList.remove('d-none');
      this.selectItemAlertTarget.classList.add('d-none');
    }

    this.selectedNavItem = navItem;
    this.selectedController = controller;

    if(this.navTop) {
      this.navTop.deselectAllNavItems();
    }

    if(this.navBottom) {
      this.navBottom.deselectAllNavItems();
    }

    controller.updateActiveNav(navItem.nav_link);

    this.navLabelTarget.value = navItem.nav_label;
    this.navIconTarget.value = navItem.nav_icon;
    this.navURLTarget.value = navItem.nav_link;
    this.navOrderTarget.value = navItem.nav_order;
    this.navRoleTarget.value = navItem.nav_access_user_role === null ? 
      '' : navItem.nav_access_user_role;

    // -1 is the value stored for 'disabled'. If the value is -1, show
    // an empty string instead.
    this.navTenancyLevelTarget.value = navItem.nav_access_group_level === -1 ?
      '' : navItem.nav_access_group_level;

    // Remove all options from the parent selector and repopulate.
    // If the selected nav item has a parent, select that option.
    navParentSelect.innerHTML = '';

    let noParentOpt = document.createElement('option');
    noParentOpt.value = '';
    noParentOpt.textContent = '-- No Parent --';
    navParentSelect.appendChild(noParentOpt);

    let isChild = (current, toCheck) => {
      let child = current.children.find((c) => {
        return c.nav_id === toCheck.nav_id;
      });

      return child !== undefined;
    }

    controller.navItems.forEach((n) => {
      // Don't add the option to set an item's parent to itself
      // or any of its children.
      if (n.nav_id !== navItem.nav_id && !isChild(navItem, n)) {
        let opt = document.createElement('option');
        opt.value = n.nav_id;
        opt.textContent = n.nav_label;
        navParentSelect.appendChild(opt);
      }
    });

    if (navItem.nav_parent && navItem.nav_parent !== '') {
      navParentSelect.value = navItem.nav_parent;
    }

    this.navLabelTarget.focus();
    this.navLabelTarget.select();
  };

  updateNavPreview() {
    this.selectedNavItem.nav_label = this.navLabelTarget.value;
    this.selectedNavItem.nav_icon = this.navIconTarget.value;
    this.selectedNavItem.nav_link = this.navURLTarget.value;
    this.selectedNavItem.nav_parent = this.navParentTarget.value;
    this.selectedNavItem.nav_order = parseInt(this.navOrderTarget.value);
    this.selectedNavItem.nav_access_group_level = this.navTenancyLevelTarget.value === '' ?
      -1 : parseInt(this.navTenancyLevelTarget.value);

    this.selectedNavItem.nav_access_user_role = this.navRoleTarget.value;

    this.selectedController.updateNavItem(this.selectedNavItem);
  };

  removeNavItem(event) {
    event.preventDefault();
    this.selectedController.removeNavItem(this.selectedNavItem);
  };

  saveChanges() {
    let navItems = this.navTop.navItems.concat(this.navBottom.navItems);

    this.navHiddenInputTarget.value = JSON.stringify(navItems);
    this.navFormTarget.submit();
  };

  cancelChanges(event) {
    event.preventDefault();
    location.reload();
  };

});