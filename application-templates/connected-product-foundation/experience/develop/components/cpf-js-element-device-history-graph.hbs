application.register("cpf-element-device-history-graph", class extends Controller {

  static get targets() {
    return [
      'graph'
    ];
  };

  static get values() {
    return {
      points: Array
    };
  };

  connect() {

    if (document.documentElement.hasAttribute("data-turbo-preview")) {
      return;
    }

    // Because Turbo removes the element from the DOM,
    // it loses registered event handlers. If the element has this
    // attribute, echarts will think it's already initialized.
    // Need to remove this attribute and clear the element so
    // echarts completely rebuilds the graph.
    this.graphTarget.removeAttribute('_echarts_instance_');
    this.graphTarget.innerHTML = '';

    let points = this.pointsValue;

    let chart = echarts.init(this.graphTarget, null, { renderer: 'svg' });

    let theme = {
      primary: getComputedStyle(document.documentElement).getPropertyValue('--cpf-primary'),
      success: getComputedStyle(document.documentElement).getPropertyValue('--cpf-success'),
      border: getComputedStyle(document.documentElement).getPropertyValue('--cpf-border'),
      text: getComputedStyle(document.documentElement).getPropertyValue('--cpf-text_mid'),
      fontFamily: getComputedStyle(document.documentElement).getPropertyValue('--cpf-font_family'),
    };

    let option = {
      grid: {
        containLabel: true,
        left: 24,
        right: 24,
        top: 12,
        bottom: 18,
        show: true,
        borderColor: theme.border
      },
      tooltip: {
        trigger: 'axis',
        axisPointer: {
          type: 'shadow'
        },
        formatter: function (params) {

          let today = params[0];
          let total = params[1];

          return `
            <strong>${moment(new Date(today.axisValue)).format('MMM DD')}</strong><br />
            Created This Day: ${today.value} <br />
            Total: ${total.value}
          `;
        }
      },
      legend: {
        data: ['Created This Day', 'Total Created']
      },
      xAxis: {
        type: 'category',
        data: points.map((p) => { return p.day.date; }),
        axisLabel: {
          formatter: function (value, index) {
            return moment(value).format('DD MMM');
          },
          showMinLabel: true,
          showMaxLabel: true,
          interval: 9,
          color: theme.text,
          fontFamily: theme.fontFamily
        },
        axisLine: {
          lineStyle: {
            color: theme.border
          }
        }
      },
      yAxis: [
        {
          type: 'value',
          name: 'Created Today',
          axisLabel: {
            color: theme.text,
            fontFamily: theme.fontFamily
          },
          splitLine: {
            lineStyle: {
                color: theme.border,
                opacity: 0.3
            }
          }
        },
        {
          type: 'value',
          name: 'Total',
          axisLabel: {
            color: theme.text,
            fontFamily: theme.fontFamily
          },
          splitLine: {
            lineStyle: {
                color: theme.border,
                opacity: 0.3
            }
          }
        }
      ],
      series: [
        {
          animation: false,
          data: points.map((p) => { return p.day.count; }),
          type: 'bar',
          barWidth: 5,
          itemStyle: {
            color: theme.primary,
            borderRadius: 10
          }
        },
        {
          animation: false,
          data: points.map((p) => { return p.total.count; }),
          type: 'line',
          yAxisIndex: 1,
          itemStyle: {
            color: theme.success
          },
          showSymbol: false
        }
      ]
    };

    chart.setOption(option, true);
    this.chart = chart;

    this.resizeObserver = new ResizeObserver(this.resizeGraph.bind(this));
    this.resizeObserver.observe(this.element);
  };

  disconnect() {
    // This will be undefined when Turbo shows a preview.
    if (this.resizeObserver) {
      this.resizeObserver.disconnect();
    }
  };

  resizeGraph() {
    this.chart.resize();
  };

});