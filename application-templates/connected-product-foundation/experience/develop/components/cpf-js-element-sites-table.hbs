application.register('cpf-element-sites-table', class extends Controller {

  static targets = ['customerSelect'];

  connect() {

    if (document.documentElement.hasAttribute('data-turbo-preview')) {
      return;
    }

    const tooltipTriggerList = this.element.querySelectorAll('[data-bs-toggle="tooltip"]')
    const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl))
  };

  updateFilters(event) {

    // This debouncing logic will only perform the filter request if the
    // user has stopped typing for 300ms. This prevents a bunch of requests
    // from overlapping on every typed character.

    if(this.filterDebounce) {
      clearTimeout(this.filterDebounce);
    }

    this.filterDebounce = setTimeout(() => {

      // Find all input elements with the data-filter attribute.
      let filterFields = this.element.querySelectorAll('[data-filter]');

      // Build array of name=value strings.
      let queryParams = Array.from(filterFields).map((f) => { return f.value !== '' ? `${f.dataset.filter}=${encodeURIComponent(f.value)}` : null });

      // Filter any nulls (there was no value in the input).
      queryParams = queryParams.filter((q) => { return q !== null });

      // Add customer option.
      if(this.hasCustomerSelectTarget) {
        queryParams.push(`customer=${this.customerSelectTarget.value}`);
      }

      let newSrc = `/cpf/elements/sites-table?${queryParams.join('&')}`;

      // Sites takes a while to load. Clear the results and show the spinner.
      this.element.querySelector('tbody').innerHTML = '';
      this.element.querySelector('tbody').innerHTML = `<img class="m-4 cpf-spinner" src="{{file 'spinner.gif'}}">`;

      // Reload the turbo frame and pass in all input fields on the query string.
      this.element.parentElement.src = newSrc;
    
    }, 300);

  }
});