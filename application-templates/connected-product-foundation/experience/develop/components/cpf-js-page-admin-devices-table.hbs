application.register("cpf-page-admin-devices-table", class extends Controller {

  static targets = [
    'columnListItemTemplate',
    'columnList',
    'tableColumnsInput',
    'currentColumnNavItem',
    'removeColumnBtn',
    'labelInput',
    'keyInput',
    'keyInputWrapper',
    'orderInput',
    'templateInput',
    'columnsForm',
    'keyLabel'
  ];

  static values = {
    columns: Array,
    selectedColumnId: String
  };

  initialize() {
    this.renderColumnList();
    this.columnsOriginal = structuredClone(this.columnsValue);
    this.selectedColumnIdValue = this.columnsValue[0].id;
  }

  connect() {
    if (document.documentElement.hasAttribute("data-turbo-preview")) {
      return;
    }
  };

  renderColumnList() {
    this.columnListTarget.innerHTML = '';
    structuredClone(this.columnsValue)
      .sort((a, b) => a.order - b.order)
      .forEach(({ label, id }) => {
        const listItem = this.columnListItemTemplateTarget.content.cloneNode(true);
        const link = listItem.querySelector('.nav-link');
        link.innerHTML = label;
        link.dataset.id = id;
        this.columnListTarget.appendChild(listItem);
      });
    this.highlightSelectedColumn();
  }

  onColumnAdd(e) {
    e.preventDefault();
    const { label, type, key, template } = e.currentTarget.dataset;
    const newColId = `__temp__${crypto.randomUUID()}`;
    this.columnsValue = structuredClone(this.columnsValue).concat({
      label,
      key,
      type,
      template,
      order: this.columnsValue[this.columnsValue.length - 1].order + 1,
      id: newColId
    });
    this.selectedColumnIdValue = newColId;
  }

  onColumnRemove(e) {
    e.preventDefault();
    if (this.tableColumnsInputTarget.value.length <= 1) {
      // require at least one column
      return;
    }
    const idx = this.columnsValue.findIndex((item) => {
      return item.id === this.selectedColumnIdValue;
    });
    if (idx !== -1) {
      const newColumnsValue = structuredClone(this.columnsValue);
      newColumnsValue.splice(idx, 1);
      this.columnsValue = newColumnsValue;
    }
    this.selectedColumnIdValue = this.columnsValue[Math.max(idx - 1, 0)].id;


  }

  onColumnSelect(e) {
    e.preventDefault();
    this.selectedColumnIdValue = e.currentTarget.dataset.id;
  }

  initForm() {
    const selectedColumn = this.columnsValue.find((item) => {
      return item.id === this.selectedColumnIdValue;
    });
    if (selectedColumn) {
      this.labelInputTarget.value = selectedColumn.label;
      this.orderInputTarget.value = selectedColumn.order;
      this.templateInputTarget.value = selectedColumn.template;
      if (selectedColumn.type === 'tag' || selectedColumn.type === 'attribute') {
        this.keyInputTarget.value = selectedColumn.key;
        this.keyInputWrapperTarget.classList.remove('d-none');
        if (selectedColumn.type === 'tag') {
          this.keyLabelTarget.innerHTML = 'Tag Name';
        } else { // attribute
          this.keyLabelTarget.innerHTML = 'Attribute Name';
        }
      } else {
        this.keyInputTarget.value = '';
        this.keyInputWrapperTarget.classList.add('d-none');
      }
    }
  }

  onInputChange(e) {
    const { name } = e.target;
    let { value } = e.target;
    if (name === 'order') {
      value = Number(value);
    }
    const newColumnsValue = structuredClone(this.columnsValue);
    const idx = this.columnsValue.findIndex((item) => {
      return item.id === this.selectedColumnIdValue;
    });
    newColumnsValue[idx][name] = value;
    this.columnsValue = newColumnsValue;
  }

  onSave(e) {
    e.preventDefault();
    const valToSubmit = this.columnsValue.map(({ id, ...item }) => {
      return item;
    });
    this.tableColumnsInputTarget.value = JSON.stringify(valToSubmit);
    this.columnsFormTarget.submit();
  }

  onCancel(e) {
    e.preventDefault();
    if (window.confirm('Discard your changes?')) {
      this.columnsValue = this.columnsOriginal;
    }
  }
  
  columnsValueChanged() {
    this.renderColumnList();
    if (this.columnsValue.length <= 1) {
      this.removeColumnBtnTarget.disabled = true;
    } else {
      this.removeColumnBtnTarget.disabled = false;
    }
  }

  selectedColumnIdValueChanged() {
    this.initForm();
    this.highlightSelectedColumn();
  }

  highlightSelectedColumn() {
    this.currentColumnNavItemTargets.forEach((el) => {
      el.classList.remove('text-primary');
      if (el.dataset.id === this.selectedColumnIdValue) {
        el.classList.add('text-primary');
      }
    });
  }

});