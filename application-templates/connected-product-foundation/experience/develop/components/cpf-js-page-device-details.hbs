application.register("cpf-page-device-details", class extends Controller {

  static targets = [
      'customerSelect',
      'siteSelectFrame',
      'dataExplorerFrame',
      'propertiesForm',
      'propertiesTab',
      'clientSideErrorMessage',
      'serverSideErrorMessage',
      'successMessage'
  ];

  static values = {
    deviceId: String,
    siteId: String,
    customerId: String
  }

  connect() {
    if (document.documentElement.hasAttribute("data-turbo-preview")) {
      return;
    }
  };

  customerSelectTargetConnected() {
    this.customerChanged();
  };

  customerChanged() {

    let params = new URLSearchParams({
      level: 2,
      placeholder: '-- Select Site --',
      formName: 'site',
      controllerName: 'cpf-page-device-details',
      parentId: this.customerSelectTarget.value,
      selectedId: this.siteIdValue
    });

    let src = `/cpf/elements/group-select?${params.toString()}`;

    this.siteSelectFrameTarget.src = src;
  };

  updateDataExplorerFrame({ detail: { queryString }}) {
    const src = `/cpf/elements/device-data-explorer/${this.deviceIdValue}?${queryString}`;
    this.dataExplorerFrameTarget.src = src;
  };

  /*
   * If the user clicks a tab, push a history
   * state with the tab as the query parameter.
   */
  tabChanged(event) {
    let url = new URL(location);
    url.searchParams.set('tab', event.params.tab);
    Turbo.visit(url.toString());
  }

  historyPopstate(event) {
    Turbo.visit(location)
  };

  submitForm(event) {

    console.log(event);

    let form = this.propertiesFormTarget;

    if(!form.checkValidity()) {
      event.preventDefault();
      event.stopPropagation();
      this.propertiesTabTarget.scrollTo(0,0);

      this.clientSideErrorMessageTarget.classList.remove('d-none');

      if(this.hasSuccessMessageTarget) {
        this.successMessageTarget.classList.add('d-none');
      }

      if(this.hasServerSideErrorMessageTarget) {
        this.serverSideErrorMessageTarget.add('d-none');
      }        
    }

    form.classList.add('was-validated');
  };

});