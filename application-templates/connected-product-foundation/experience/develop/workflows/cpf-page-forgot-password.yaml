resourceType: ExperienceFlowVersion
resources:
  - description: Accepts a user's email address and generates a reset email.
    enabled: true
    exportHash: 1f84f8374d043c2ae2e6a7da2581b8e0aeabd54d01cd148d69ac1548e73488fe
    flowId: ~exportplaceholderid-flow-cpfPageForgotPassword~
    globals: []
    id: ~exportplaceholderid-flowVersion-cpfPageForgotPassword~
    name: cpf-page-forgot-password
    nodes:
      - config:
          algorithmTemplate: HS256
          dataTemplate: "{\n\t\"email\": \"{{working.user.email}}\",\n  \"id\": \"{{working.user.id}}\"\n}"
          dataTemplateType: json
          destinationPath: working.token
          expiresIn: 86400
          headerTemplate: ''
          headerTemplateType: json
          issuerTemplate: '{{data.headers.x-forwarded-proto}}://{{data.headers.host}}'
          secretTemplate: '{{globals.cpf-jwt-password-reset-secret}}'
        id: xD4ctmBZup
        meta:
          category: logic
          description: >-
            Create a token, which we will use for resetting the user's password.
            You will need to set a "jwtSecret" global variable, which should be
            a random alphanumeric string that is 16 characters long.
          isExpRequired: true
          label: 'JWT: Create'
          name: jwt-create
          timeUnit: Days
          x: 660
          'y': 900
        outputIds:
          - - NcsJUUod_J
        type: JWTCreateNode
      - config:
          errorsPath: ''
          schema: "{\n\t\"type\": \"object\",\n  \"properties\": {\n    \"email\": {\n    \t\"type\": \"string\",\n      \"format\": \"email\"\n    }\n  },\n  \"required\": [\"email\"],\n  \"additionalProperties\": false\n}"
          schemaType: json
          toValidatePath: data.body
        id: taoRMtDnfm
        meta:
          category: logic
          description: Validate the data submitted in the post request.
          label: Validate Payload
          name: validate-payload
          x: 360
          'y': 140
        outputIds:
          - - kPogGQTmao
          - - eDIbA3NQw1
        type: ValidatePayloadNode
      - config:
          bodyTemplate: /forgot-password?error=Invalid email address provided.
          bodyTemplateType: string
          cookieInfo: []
          headerInfo: []
          mqttTopicsTemplate: []
          replyIdPath: ''
          replyType: redirect
          responseCodeTemplate: '302'
          sameSiteTemplate: ''
        id: kPogGQTmao
        meta:
          category: output
          description: An error occurred. Render the forgot password page with an error.
          label: Invalid Email
          mqttTopicsType: []
          name: endpoint-reply
          x: 260
          'y': 260
        outputIds:
          - - iaAr7uxmKY
        type: EndpointReplyNode
      - config:
          emailOrIdTemplate: '{{data.body.email}}'
          findMetadata: false
          findMethod: emailOrId
          findMultiple: false
          resultPath: working.user
          sortDirection: asc
          sortField: email
        id: 1_K5Nc0WXk
        meta:
          category: experience
          description: See if we have a user with the email address that was submitted.
          label: Get User
          name: get-experience-user
          x: 560
          'y': 700
        outputIds:
          - - FU9QdnCRiK
        type: GetExperienceUserNode
      - config:
          bodyTemplate: /forgot-password?success=true
          bodyTemplateType: string
          cookieInfo: []
          headerInfo: []
          mqttTopicsTemplate: []
          replyIdPath: ''
          replyType: redirect
          responseCodeTemplate: '301'
          sameSiteTemplate: ''
        id: JKWik6hP13
        meta:
          category: output
          description: >-
            Render the forgot password page with a success message. The state of
            this page is the same whether we find a user or not.
          label: Success
          mqttTopicsType: []
          name: endpoint-reply
          x: 560
          'y': 480
        outputIds:
          - - 1_K5Nc0WXk
        type: EndpointReplyNode
      - config:
          expression: '{{working.user}} !== null'
        id: FU9QdnCRiK
        meta:
          category: logic
          description: Did we find a user with that email address?
          label: User Found?
          name: conditional
          x: 560
          'y': 800
        outputIds:
          - - VZ1ABR1KfV
          - - xD4ctmBZup
        type: ConditionalNode
      - config:
          bodyTemplate: |
            <!doctype html>
            <html>
              <head>
                <title></title>
                <meta name="viewport" content="width=device-width" />
                <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
              </head>
              <body>
                <div>
                  <p><strong>Hi{{#if working.user.firstName}} {{working.user.firstName}}{{/if}},</strong></p>
                  <p>We received a request to reset your account password for {{data.headers.x-forwarded-proto}}://{{data.headers.host}}.</p>
                  <p>Click the link below to reset your password, or copy and paste it into your browser.</p>
                  <p><a href="{{data.headers.x-forwarded-proto}}://{{data.headers.host}}/reset-password?token={{working.token}}">{{data.headers.x-forwarded-proto}}://{{data.headers.host}}/reset-password?token={{working.token}}</a></p>
                </div>
              </body>
            </html>
          fromTemplate: 'noreply@{{data.headers.host}}'
          resultPath: working.emailResult
          subjectTemplate: Request to Reset Password
          toAddresses:
            - '{{working.user.email}}'
        id: NcsJUUod_J
        meta:
          category: output
          description: >-
            Send an email to the user with a token for resetting the account
            password.
          label: Send Reset Email
          name: structure-email
          x: 660
          'y': 1000
        outputIds:
          - - STDVaKMWYe
        type: StructureEmailNode
      - config:
          bodyTemplate: |
            <!doctype html>
            <html>
              <head>
                <title></title>
                <meta name="viewport" content="width=device-width" />
                <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
              </head>
              <body>
                <div>
                  <p><strong>Hello,</strong></p>
                  <p>We received a request to reset an account password for {{data.headers.x-forwarded-proto}}://{{data.headers.host}}. However, we could not find a user in our system matching that email address.</p>
                  <p>If you have an account, please <a href="{{data.headers.x-forwarded-proto}}://{{data.headers.host}}/login">sign in</a> or <a href="{{data.headers.x-forwarded-proto}}://{{data.headers.host}}/forgot-password">reset your password</a> using the email address that's currently associated with your account.</p>
                  <p>If you do not have an account, you can ignore this email.</p>
                </div>
              </body>
            </html>
          fromTemplate: 'noreply@{{data.headers.host}}'
          resultPath: working.emailResult
          subjectTemplate: Request to Reset Password
          toAddresses:
            - '{{data.body.email}}'
        id: VZ1ABR1KfV
        meta:
          category: output
          description: >-
            Send an email to the address the user entered, stating that a
            password reset was requested but we couldn't find that user.
          label: No User Email
          name: structure-email
          x: 460
          'y': 1000
        outputIds:
          - - STDVaKMWYe
        type: StructureEmailNode
      - config:
          level: verbose
          message: ''
          property: ''
        id: iaAr7uxmKY
        meta:
          category: debug
          description: ''
          label: Debug
          name: debug
          x: 260
          'y': 360
        outputIds: []
        type: DebugNode
      - config:
          level: verbose
          message: ''
          property: ''
        id: STDVaKMWYe
        meta:
          category: debug
          description: ''
          label: Debug
          name: debug
          x: 560
          'y': 1140
        outputIds: []
        type: DebugNode
      - config: {}
        id: kyAmaZkKkW
        meta:
          annotationText: >-
            If the user does not exist, send an email to the address anyway.
            This lets them know a password request was sent, but an account does
            not exist for this address.
          category: annotation
          height: 200
          label: Note
          name: note
          width: 300
          x: 140
          'y': 1000
        outputIds: []
        type: AnnotationNode
      - config: {}
        id: ljG1GLGB9B
        meta:
          annotationText: >-
            Generate a reset token that contains the user's ID and email. The
            token is signed by the `tl-jwt-reset-secret` in globals, and the
            issuer is the domain from which the request originated.
          category: annotation
          height: 180
          label: Note
          name: note
          width: 300
          x: 860
          'y': 900
        outputIds: []
        type: AnnotationNode
      - config: {}
        id: hGM5RgLFWf
        meta:
          annotationText: >-
            This workflow expects a valid email address to be POSTed in the body
            of the request. If an email address does not exist, or is not
            formatted correctly, send the user back to the forgot password page
            with an error.
          category: annotation
          height: 180
          label: Note
          name: note
          width: 300
          x: 40
          'y': 40
        outputIds: []
        type: AnnotationNode
      - config: {}
        id: n9B6KG4g6A
        meta:
          annotationText: >-
            Always send the user back to the forgot password page with a success
            message, even if the user does not exist. This prevents attackers
            from spamming this endpoint looking for valid email addresses.
          category: annotation
          height: 180
          label: Note
          name: note
          width: 300
          x: 760
          'y': 480
        outputIds: []
        type: AnnotationNode
      - config:
          expression: '!!{{globals.cpf-jwt-password-reset-secret}}'
        id: eDIbA3NQw1
        meta:
          category: logic
          description: ''
          label: Conditional
          name: conditional
          x: 460
          'y': 260
        outputIds:
          - - H49MqGRiZd
          - - JKWik6hP13
        type: ConditionalNode
      - config: {}
        id: tzR21Urlb6
        meta:
          annotationText: >-
            Make sure the application has the `cpf-jwt-password-reset-secret`
            global defined.
          category: annotation
          height: 100
          label: Note
          name: note
          width: 300
          x: 660
          'y': 260
        outputIds: []
        type: AnnotationNode
      - config:
          bodyTemplate: >-
            /forgot-password?error=Missing application configuration. Ensure the
            'cpf-jwt-password-reset-secret' global variable is
            defined.&email={{data.body.email}}
          bodyTemplateType: string
          cookieInfo: []
          headerInfo: []
          mqttTopicsTemplate: []
          replyIdPath: ''
          replyType: redirect
          responseCodeTemplate: '302'
          sameSiteTemplate: ''
        id: H49MqGRiZd
        meta:
          category: output
          description: An error occurred. Render the forgot password page with an error.
          label: Invalid Config
          mqttTopicsType: []
          name: endpoint-reply
          x: 360
          'y': 480
        outputIds:
          - - Vx3yAhAfip
        type: EndpointReplyNode
      - config:
          level: verbose
          message: ''
          property: ''
        id: Vx3yAhAfip
        meta:
          category: debug
          description: ''
          label: Debug
          name: debug
          x: 360
          'y': 580
        outputIds: []
        type: DebugNode
    triggers:
      - config: {}
        key: ~exportplaceholderid-experienceEndpoint-postForgotPassword~
        meta:
          category: trigger
          description: When a user submits the forgot password form ...
          label: POST Forgot Password
          name: endpoint
          uiId: ECHThcHDN1
          x: 360
          'y': 40
        outputIds:
          - - taoRMtDnfm
        type: endpoint
    version: develop
version: 1
